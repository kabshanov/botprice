Описание структуры файла bot.py
Файл bot.py содержит основной код для Telegram-бота, который обрабатывает сообщения и команды, а также выполняет действия по управлению товарами, созданию прайс-листов и работе с данными.

1. Импорты
В начале файла импортируются необходимые библиотеки и модули:

Стандартные библиотеки Python (asyncio, csv, os, re, и т.д.).
Библиотеки Telegram Bot API (telegram, telegram.ext).
Внешние модули, такие как openpyxl (для работы с Excel).
Пользовательские модули:
PRODUCT_LIBRARY: Библиотека товаров с их моделями и вариантами.
utils: Утилиты для поиска и нормализации данных.
2. Глобальные переменные
COUNTRY_EMOJI_MAP: Словарь для сопоставления флагов стран с их названиями.
TEXT_TO_FLAG: Обратное сопоставление для эмодзи стран.
USER_DATA: Временное хранилище данных пользователей (включая список товаров).
SPECIAL_RULES: Правила обработки моделей для определенных стран (например, eSIM или Dual SIM).
MAX_TELEGRAM_TEXT: Лимит длины сообщений в Telegram (4096 символов).
3. Обработка данных
Содержит вспомогательные функции:

is_price_line: Проверяет строку на наличие цены.
get_base_variant: Удаляет информацию о SIM-картах из названий моделей.
extract_supplier: Извлекает информацию о поставщике из сообщения.
is_non_product_line: Определяет строки, которые не относятся к товарам (например, никнеймы, метаинформация).
extract_flags и process_emojis: Работа с эмодзи и флагами стран.
extract_data: Извлекает название продукта, цену и комментарий из строки.
apply_special_rules: Применяет специальные правила к продуктам.
add_or_update_product: Добавляет или обновляет товар в хранилище.
4. Обработчики команд
Каждая команда бота имеет свой обработчик:

/start: Отправляет приветственное сообщение.
/help: Показывает справку с описанием команд.
/best: Формирует список товаров с лучшими ценами. Предлагает выбрать формат вывода (CSV, Excel, сообщения).
/my_price_list: Позволяет пользователю создать прайс-лист с кастомными столбцами и наценками.
/margin: Позволяет добавить наценку на товары.
/clear: Очищает список товаров пользователя.
/restart_price_list: Сбрасывает настройки прайс-листа.
5. Обработка сообщений
message_handler: Обрабатывает входящие текстовые сообщения, извлекает информацию о товарах, их характеристиках, ценах и поставщиках.
6. Работа с файлами
CSV и Excel: Генерация файлов прайс-листов в формате CSV или Excel через функции:
generate_price_list_csv.
generate_price_list_excel.
Логика формирования списков:
Группировка товаров.
Сортировка по приоритету SIM-карт и объема памяти.
7. Вспомогательные функции
sim_priority и capacity_priority: Определяют порядок сортировки товаров по типу SIM и объему памяти.
round_up_to_nearest_100: Округляет цены до ближайших 100 рублей (для наценок).
8. Конфигурация и запуск
Команды Telegram: Команды, доступные пользователю, задаются через BotCommand.
main: Главная функция для запуска бота. Инициализирует обработчики и начинает прослушивание событий с использованием метода run_polling.
9. Сценарии (Conversation Handlers)
Содержит сложные сценарии взаимодействия:

get_my_price_list_conversation_handler: Управляет созданием кастомного прайс-листа.
get_margin_conversation_handler: Обрабатывает добавление наценок.
Итоговая структура
Файл структурирован по функциональности:

Импорты и настройки.
Вспомогательные функции для обработки данных.
Обработчики команд и сообщений.
Работа с файлами и генерация прайс-листов.
Основная точка входа (main).
Если требуется более детальная документация для какой-то части, уточните!






Вы сказали:
Опиши все функции которые там есть
ChatGPT сказал:
ChatGPT
Вот полный список функций в файле bot.py с их кратким описанием:

Вспомогательные функции
is_price_line(line: str) -> bool

Проверяет, содержит ли строка цену.
Ищет числа с возможными разделителями тысяч и символами валюты.
get_base_variant(variant_name: str) -> str

Удаляет информацию о типе SIM-карты из названия варианта продукта.
extract_supplier(update: Update) -> str

Извлекает информацию о поставщике из пересланного сообщения или последней строки текста.
is_non_product_line(line: str) -> bool

Определяет, относится ли строка к никнейму, метаинформации или состоит только из эмодзи.
extract_flags(line: str) -> Tuple[List[str], str, List[str]]

Извлекает флаги стран из строки, возвращает список флагов, очищенную строку и список стран.
process_emojis(cleaned_line: str, original_line: str, allowed_emojis: List[str]) -> Tuple[str, str]

Извлекает разрешенные эмодзи из строки, удаляет их из текста и возвращает очищенную строку и комментарии.
extract_data(line: str) -> Tuple[Optional[str], Optional[int], str]

Извлекает название продукта, цену и комментарий из строки.
apply_special_rules(model_group: str, country: str, variant: str, product_library: Dict, brand: str) -> str

Применяет специальные правила для продукта на основе страны.
add_or_update_product(user_data, user_id, line: str, countries: List[str], selected_variant: str, model_group: str, price: int, supplier: str, comment: str)

Добавляет новый товар или обновляет существующий в хранилище пользователя.
sim_priority(product_name: str) -> int

Определяет приоритет сортировки по типу SIM (обычный, eSIM, Dual SIM).
capacity_priority(product_name: str) -> int

Возвращает объем памяти продукта для сортировки (например, 256 GB или 1 TB).
round_up_to_nearest_100(amount)

Округляет сумму до ближайших 100 рублей.
Обработчики сообщений и команд
start(update: Update, context: ContextTypes.DEFAULT_TYPE)

Отправляет приветственное сообщение пользователю.
help_command(update: Update, context: ContextTypes.DEFAULT_TYPE)

Показывает справку с описанием всех доступных команд.
clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE)

Очищает список товаров пользователя.
best_command(update: Update, context: ContextTypes.DEFAULT_TYPE)

Отправляет кнопки для выбора брендов и форматов вывода (CSV, Excel, сообщения).
best_brand_callback(update: Update, context: ContextTypes.DEFAULT_TYPE)

Обрабатывает выбор бренда и предлагает выбрать формат вывода.
best_command_callback(update: Update, context: ContextTypes.DEFAULT_TYPE)

Обрабатывает выбор формата (CSV, Excel, сообщение) и генерирует данные.
best_command_comments_callback(update: Update, context: ContextTypes.DEFAULT_TYPE)

Обрабатывает выбор комментариев (учитывать/не учитывать) для текстового вывода.
margin_command(update: Update, context: ContextTypes.DEFAULT_TYPE)

Начинает сценарий добавления наценки, предлагает выбрать тип наценки (твердая сумма или процент).
margin_type_callback(update: Update, context: ContextTypes.DEFAULT_TYPE)

Обрабатывает выбор типа наценки и запрашивает значение наценки.
margin_value_handler(update: Update, context: ContextTypes.DEFAULT_TYPE)

Обрабатывает введенное значение наценки, проверяет его корректность.
margin_brand_callback(update: Update, context: ContextTypes.DEFAULT_TYPE)

Обрабатывает выбор бренда для наценки.
margin_format_callback(update: Update, context: ContextTypes.DEFAULT_TYPE)

Обрабатывает выбор формата вывода для товаров с наценкой.
margin_comments_callback(update: Update, context: ContextTypes.DEFAULT_TYPE)

Обрабатывает выбор "учитывать комментарии" для текстового вывода с наценкой.
message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE)

Основной обработчик сообщений:
Анализирует входящий текст.
Извлекает данные о товарах, странах, ценах, поставщиках и комментариях.
Генерация файлов
generate_price_list_csv(update: Update, context: ContextTypes.DEFAULT_TYPE)

Генерирует прайс-лист в формате CSV на основе данных пользователя.
generate_price_list_excel(update: Update, context: ContextTypes.DEFAULT_TYPE)

Генерирует прайс-лист в формате Excel на основе данных пользователя.
send_csv(message: Message, context: ContextTypes.DEFAULT_TYPE, final_product_list: Dict[str, Dict[str, List[Dict[str, Any]]]])

Формирует CSV-файл и отправляет его пользователю.
send_excel(message: Message, context: ContextTypes.DEFAULT_TYPE, final_product_list: Dict[str, Dict[str, List[Dict[str, Any]]]])

Формирует Excel-файл и отправляет его пользователю.
Сценарии
start_my_price_list(update: Update, context: ContextTypes.DEFAULT_TYPE)

Начинает сценарий создания пользовательского прайс-листа.
choose_columns(update: Update, context: ContextTypes.DEFAULT_TYPE)

Запрашивает количество столбцов для прайс-листа.
enter_columns_names(update: Update, context: ContextTypes.DEFAULT_TYPE)

Запрашивает названия столбцов.
enter_prices_gradation(update: Update, context: ContextTypes.DEFAULT_TYPE)

Запрашивает градацию цен для прайс-листа.
cancel_my_price_list(update: Update, context: ContextTypes.DEFAULT_TYPE)

Отменяет процесс создания прайс-листа.
choose_output_format(update: Update, context: ContextTypes.DEFAULT_TYPE)

Предлагает выбрать формат вывода (CSV или Excel).
restart_price_list(update: Update, context: ContextTypes.DEFAULT_TYPE)

Сбрасывает текущие настройки прайс-листа.
Основная функция
main()
Главная точка входа:
Настраивает обработчики команд и сообщений.
Запускает бота в режиме long-polling.
Если требуется более подробное описание для конкретной функции или группы функций, уточните, и я добавлю больше деталей!





Вы сказали:
Дай описание utils.py
ChatGPT сказал:
ChatGPT
Описание файла utils.py
Файл utils.py содержит утилитарные функции, которые помогают в обработке данных, используемых в боте. Эти функции сосредоточены на нормализации, поиске, сопоставлении и кэшировании данных о продуктах.

Функции файла utils.py
normalize_product_name(product_name: str) -> str
Описание: Нормализует имя продукта для упрощения последующего поиска.
Шаги нормализации:
Замена специфических символов (например, турецкие буквы ı → i, İ → I).
Приведение к нижнему регистру.
Удаление ключевых слов, таких как "iphone", "titanium", "apple".
Удаление скобок и лишних пробелов.
Применение Unicode-нормализации (NFKC).
build_alias_dict(product_library: dict) -> dict
Описание: Создает словарь алиасов (псевдонимов) для всех продуктов в библиотеке PRODUCT_LIBRARY.
Результат:
Сопоставляет нормализованное имя продукта с соответствующей информацией (бренд, модель, вариант).
Пример:
python
Копировать код
{
    "13 128 gb blue": ("Apple", "iPhone 13", "13 128 Blue"),
    "se 3 64 red": ("Apple", "iPhone SE 3", "SE 3 64 Red"),
    ...
}
find_closest_product_name(user_input: str, threshold: float = 96.5) -> Optional[Tuple[str, str, str]]
Описание: Находит наиболее близкое совпадение для введенного пользователем имени продукта.
Шаги:
Точное совпадение:
Если пользовательский ввод есть в алиасах, возвращает соответствующий бренд, модель и вариант.
Fuzzy-поиск:
Использует библиотеку rapidfuzz для нахождения лучшего совпадения.
Оценка совпадения:
Оценивает пересечения токенов (слов) между вводом пользователя и совпадением.
Учитывает порог threshold для фильтрации неподходящих результатов.
Параметры:
user_input: Введенное пользователем имя продукта.
threshold: Минимальный уровень сходства для принятия совпадения.
Результат:
Возвращает кортеж (brand, model, variant) или None, если совпадение не найдено.
find_product_cached(user_input: str) -> Optional[Tuple[str, str, str]]
Описание: Кэшируемая версия функции поиска продукта.
Преимущества:
Ускоряет повторный поиск идентичных запросов.
Использует декоратор @lru_cache с размером кэша до 1000 записей.
Пример использования:
python
Копировать код
result = find_product_cached("13 128 gb blue")
# Вернет: ("Apple", "iPhone 13", "13 128 Blue")
ALIAS_DICT
Описание: Глобальный словарь алиасов, созданный на основе функции build_alias_dict.
Структура:
Ключи: нормализованные имена продуктов.
Значения: кортежи (brand, model, variant).
Используемые технологии
rapidfuzz

Используется для fuzzy-поиска (поиск по принципу "наиболее похожего совпадения").
Используется функция process.extractOne с метрикой fuzz.token_set_ratio.
@lru_cache

Кэширует результаты функции find_product_cached, чтобы ускорить обработку повторных запросов.
unicodedata

Применяется для Unicode-нормализации строки.
logging

Логирует важные этапы поиска и нормализации для отладки и мониторинга.
re (регулярные выражения)

Применяется для нормализации текста (например, удаление лишних символов, ключевых слов и пробелов).
Пример использования утилит
Поиск продукта
python
Копировать код
user_input = "iPhone 13 Blue 128GB"
result = find_product_cached(user_input)
print(result)
# Вывод: ("Apple", "iPhone 13", "13 128 Blue")
Нормализация имени продукта
python
Копировать код
name = "iPhone 13 (128GB) Titanium"
normalized_name = normalize_product_name(name)
print(normalized_name)
# Вывод: "13 128"
Заключение
Файл utils.py содержит функционал, обеспечивающий:

Удобный поиск продуктов.
Эффективную нормализацию и сопоставление данных.
Оптимизацию за счет кэширования запросов.
Эти функции критически важны для работы бота, так как они позволяют обрабатывать пользовательские запросы и данные о продуктах точно и быстро.





