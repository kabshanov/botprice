# bot.py

import csv
import os
import random
import re
import tempfile
import openpyxl
import math
import itertools
import nest_asyncio
nest_asyncio.apply()

from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, CallbackContext,
    MessageHandler, filters, ConversationHandler, CallbackQueryHandler,
)
from google_drive_utils import API_TOKEN
from telegram import Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup, Message, WebAppInfo
from telegram.constants import ChatAction, ParseMode
from datetime import datetime, timezone
from typing import Tuple, List, Dict, Any, Set
from openpyxl.styles import PatternFill, Font
from collections import defaultdict

from shared_data import (USER_DATA, PRODUCT_LIBRARY, TEXT_TO_FLAG, MAX_TELEGRAM_TEXT, LIST_BRAND_GROUP,
    currency_api_cbr, exchange_api)
from db_utils import init_db, clear_user_data
from utils import message_handler
from sorting_rules import get_sort_key
from currency_api import BinanceAPI
from ai_assistant import register_ai_assistant


import logging
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.WARNING, #‚ö†Ô∏è‚ö†Ô∏è
    datefmt='%H:%M'
)
# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –ª–æ–≥–æ–≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ httpx
logging.getLogger("httpx").setLevel(logging.WARNING)

# ------------------ –£—Ç–∏–ª–∏—Ç–∞: pseudo_user_data -------------------
def load_pseudo_user_data(user_id: int) -> dict:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è:
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {"products": [...]} –∏–∑ –±–∞–∑—ã,
    —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –±–µ–∑ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è –∫–æ–¥–∞
    –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å build_final_product_list({ "products": [...] }).
    """
    rows = get_all_products(user_id)
    return {"products": rows}

#-----------------------–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤—ã–≤–æ–¥–µ-----------------------------

def remove_commented_products(final_product_list):
    """
    –£–±–∏—Ä–∞–µ—Ç –∏–∑ final_product_list –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π comment.
    """
    for mg in list(final_product_list.keys()):
        product_dict = final_product_list[mg]
        for product_name in list(product_dict.keys()):
            entries = product_dict[product_name]
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –≥–¥–µ comment=''
            filtered = [e for e in entries if not e["comment"].strip()]
            if filtered:
                product_dict[product_name] = filtered
            else:
                # –ü—É—Å—Ç–æ ‚Äî —É–¥–∞–ª—è–µ–º
                del product_dict[product_name]
        # –ï—Å–ª–∏ model_group –ø—É—Å—Ç
        if not product_dict:
            del final_product_list[mg]

def escape_html(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML-—Ä–∞–∑–º–µ—Ç–∫–µ Telegram.
    """
    return (text.replace("&", "&amp;")
                .replace("<", "&lt;")
                .replace(">", "&gt;")
                .replace('"', "&quot;"))

#-----------------------–°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π-----------------------------
async def restart_all(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # 1) –û—á–∏—â–∞–µ–º user_data
    context.user_data.clear()

    # 2) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await update.message.reply_text("–í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

    # 3) –í–æ–∑–≤—Ä–∞—â–∞–µ–º ConversationHandler.END
    #    —á—Ç–æ–±—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ –ª—é–±–æ–≥–æ ConversationHandler
    return ConversationHandler.END

#-----------------------my_price_list-----------------------------
from db_utils import (
    get_all_products,
    get_user_settings,
    save_user_settings,
    clear_user_settings,
    # ...
)
...

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è ConversationHandler

def reset_error_counter(context: ContextTypes.DEFAULT_TYPE, key: str) :
    context.user_data[key] = 0

def increment_error_counter(context: ContextTypes.DEFAULT_TYPE, key: str) :
    context.user_data[key] = context.user_data.get(key, 0) + 1

def get_error_counter(context: ContextTypes.DEFAULT_TYPE, key: str) :
    return context.user_data.get(key, 0)

async def send_typing_action(context: ContextTypes.DEFAULT_TYPE, chat_id: int) :
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è "–ø–µ—á–∞—Ç–∞—é—â–µ–≥–æ –±–æ—Ç–∞"

# ConversationHandler states
CHOOSE_COLUMNS = 1
ENTER_COLUMNS_NAMES = 2
ENTER_PRICES_GRADATION = 3
CHOOSE_FORMAT_LIST = 4

# –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è —ç—Ç–∞–ø–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
ERROR_MESSAGES_COLUMNS = [
    "üôà –£–ø—Å! –≠—Ç–æ –Ω–µ —Ç–æ —á–∏—Å–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç 1 –¥–æ 5. –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞? üîÑ",
    "üßê –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π—Ç–µ –µ—â—ë —Ä–∞–∑: –æ—Ç 1 –¥–æ 5, –Ω–µ –±–æ–ª—å—à–µ –∏ –Ω–µ –º–µ–Ω—å—à–µ. üòä",
    "ü§î –•–º, –∫–∞–∂–µ—Ç—Å—è, —è –∂–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑. ‚è≥",
    "üî¢ –ü–æ—Ö–æ–∂–µ, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 5! –î–µ—Ä–∑–∞–π—Ç–µ! üí™",
    "‚ùó –û–π-–æ–π, —Ç–∞–∫–æ–µ —á–∏—Å–ª–æ –º–Ω–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –ù—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –º–µ–∂–¥—É 1 –∏ 5. –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞? üöÄ",
    "ü§∑‚Äç‚ôÄÔ∏è –û–π, –∫–∞–∂–µ—Ç—Å—è, —è –∑–∞–ø—É—Ç–∞–ª—Å—è... –Ø –∂–¥—É —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑? üîÑ",
    "üîç –ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥: –º–Ω–µ –Ω—É–∂–Ω–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5. –í–µ—Ä—é, —É –≤–∞—Å –ø–æ–ª—É—á–∏—Ç—Å—è! üí™",
    "üßÆ –ú–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç —ç—Ç–æ —á–∏—Å–ª–æ... –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5, –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º. üöÄ",
    "üòÖ –Ø –ø–æ–∫–∞ –µ—â—ë —É—á—É—Å—å —Å—á–∏—Ç–∞—Ç—å... –ü–æ–º–æ–≥–∏—Ç–µ –º–Ω–µ! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ–∂–¥—É 1 –∏ 5, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. üß°",
    "‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, –≤—ã –≤—ã—à–ª–∏ –∑–∞ —Ä–∞–º–∫–∏! –ß–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 5 ‚Äì —ç—Ç–æ –º–æ–π –ø—Ä–µ–¥–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! üî¢"
]

FINAL_ERROR_COLUMNS = [
    "üòÖ –ü–æ—Ö–æ–∂–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /my_price_list.",
    "ü§∑‚Äç‚ôÇÔ∏è –í–∏–¥–∏–º–æ, —ç—Ç–æ –Ω–µ –≤–∞—à –¥–µ–Ω—å —Å —á–∏—Å–ª–∞–º–∏! –ü–æ–ø—Ä–æ–±—É–µ–º —Å –Ω–∞—á–∞–ª–∞? –ù–∞–±–µ—Ä–∏—Ç–µ /my_price_list.",
    "üé≠ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –±—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ–π! –î–∞–≤–∞–π—Ç–µ –≤–µ—Ä–Ω—ë–º—Å—è –∫ –Ω–∞—á–∞–ª—É. /my_price_list –ø–æ–º–æ–∂–µ—Ç."
]

# –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è —ç—Ç–∞–ø–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤
ERROR_MESSAGES_COLUMNS_LENGTH = [
    "‚è≥ –û–π, –æ–¥–Ω–æ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤). –î–∞–≤–∞–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ —Å–æ–∫—Ä–∞—Ç–∏–º –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑. üòâ",
    "üòÖ –ü–æ—Ö–æ–∂–µ, –≤—ã —Ä–∞–∑–æ–≥–Ω–∞–ª–∏—Å—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ª–æ–∂–∏—Ç—å—Å—è –≤ 30 —Å–∏–º–≤–æ–ª–æ–≤ ‚Äì –ª–∞–∫–æ–Ω–∏—á–Ω–æ—Å—Ç—å —Ä—É–ª–∏—Ç! üöÄ",
    "üßê –£–ø—Å! –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ... –ú–Ω–µ –ø–æ–¥–æ–π–¥—ë—Ç —á—Ç–æ-—Ç–æ –ø–æ–∫–æ—Ä–æ—á–µ ‚Äì –º–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞? ‚úÇÔ∏è",
    "üôà –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ü–æ–º–æ–≥–∏—Ç–µ –º–Ω–µ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è ‚Äì –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–æ—á–µ 30 —Å–∏–º–≤–æ–ª–æ–≤. üòä",
    "üìè –û–≥–æ! –ö–∞–∂–µ—Ç—Å—è, –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ —Ä–∞—Å—Ç—è–Ω—É–ª–æ—Å—å —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ. –ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤ ‚Äì –¥–∞–≤–∞–π—Ç–µ —É–∫–æ—Ä–æ—Ç–∏–º –∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞. üí°",
    "‚úÇÔ∏è –ê–π-–∞–π! –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ... –î–∞–≤–∞–π—Ç–µ –æ–±—Ä–µ–∂–µ–º –ª–∏—à–Ω–µ–µ –∏ —É–ª–æ–∂–∏–º—Å—è –≤ 30 —Å–∏–º–≤–æ–ª–æ–≤. –ö–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ! üöÄ",
    "üîç –£–ø—Å, –æ–¥–Ω–æ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏! –ü–æ–º–Ω–∏–º: –º–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤. –î–∞–≤–∞–π—Ç–µ –≤–µ—Ä–Ω—ë–º—Å—è –∏ –ø–æ–ø—Ä–∞–≤–∏–º. üìã",
    "üñäÔ∏è –¢–∞–∫–æ–µ –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ –Ω–µ –≤–ª–µ–∑–µ—Ç –≤ –º–æ–π —Ñ–∞–π–ª! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ª–æ–∂–∏—Ç—å—Å—è –≤ 30 —Å–∏–º–≤–æ–ª–æ–≤, –∏ –≤—Å—ë –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–Ω–æ. üéâ"
]

FINAL_ERROR_COLUMNS_LENGTH = [
    "üòÖ –ü–æ—Ö–æ–∂–µ, –≤—ã –ª—é–±–∏—Ç–µ –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /my_price_list. üìù",
    "ü§∑‚Äç‚ôÇÔ∏è –ö–∞–∂–µ—Ç—Å—è, –º—ã —Å–ª–µ–≥–∫–∞ –∑–∞–ø—É—Ç–∞–ª–∏—Å—å –≤ –±—É–∫–≤–∞—Ö... –ü–æ–ø—Ä–æ–±—É–µ–º —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞? –ù–∞–±–µ—Ä–∏—Ç–µ /my_price_list. üîÑ",
    "üé≠ –ü–æ—Ä–∞ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–¥—ã—à–∫—É! –£–±–µ—Ä–∏—Ç–µ –ª–∏—à–Ω–µ–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥–æ–π /my_price_list. –Ø –≤–µ—Ä—é –≤ –≤–∞—Å! üí™",
    "üõ† –ß—Ç–æ-—Ç–æ –∏–¥—ë—Ç –Ω–µ —Ç–∞–∫... –ú–æ–∂–µ—Ç, —Å–æ–∫—Ä–∞—Ç–∏–º –∏ –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞? –í–≤–µ–¥–∏—Ç–µ /my_price_list –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞. üöÄ",
    "üßπ –î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—á–∏—Å—Ç–∏–º –¥–æ—Ä–æ–≥—É –¥–ª—è –Ω–æ–≤—ã—Ö –∏–¥–µ–π! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥–æ–π /my_price_list. ‚è≥"
]

# –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è —ç—Ç–∞–ø–∞ –≥—Ä–∞–¥–∞—Ü–∏–∏ —Ü–µ–Ω
ERROR_MESSAGES_PRICES_FORMAT = [
    "üîÑ –û–π! –ü–æ—Ö–æ–∂–µ, —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–µ–º–Ω–æ–≥–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–º–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòä",
    "üìù –ö–∞–∂–µ—Ç—Å—è, –≤ –≤–∞—à–µ–º –≤–≤–æ–¥–µ –µ—Å—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–ª–µ–¥—É–µ—Ç–µ –ø—Ä–∏–º–µ—Ä—É, –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É. üöÄ",
    "‚ùó –í–Ω–∏–º–∞–Ω–∏–µ! –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥—Ä–∞–¥–∞—Ü–∏—é —Ü–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—Ä–∞–∑—Ü—É. üí°",
    "ü§î –•–º, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. üìã",
    "üî¢ –ü–æ—Ö–æ–∂–µ, —á–∏—Å–ª–∞ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. üßÆ",
    "üõ† –£–ø—Å! –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–≤–æ–¥–∞. –î–∞–≤–∞–π—Ç–µ —Å–≤–µ—Ä–∏–º—Å—è —Å –ø—Ä–∏–º–µ—Ä–æ–º –∏ –ø–æ–≤—Ç–æ—Ä–∏–º –ø–æ–ø—ã—Ç–∫—É. üìù",
    "üìä –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ñ–æ—Ä–º–∞—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞. üòä",
    "üôà –Ø –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –≤–≤–æ–¥. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–ª–µ–¥—É–µ—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–∏–º–µ—Ä–∞, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üîÑ",
    "üöß –û—à–∏–±–∫–∞! –§–æ—Ä–º–∞—Ç –≥—Ä–∞–¥–∞—Ü–∏–∏ —Ü–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –µ—â—ë —Ä–∞–∑ –ø–æ –ø—Ä–∏–º–µ—Ä—É –∏ –ø–æ–≤—Ç–æ—Ä–∏–º. üí™",
    "üîç –ù–µ —É–¥–∞—ë—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üìñ"
]

FINAL_ERROR_PRICES_FORMAT = [
    "üòÖ –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /my_price_list, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑. üåü",
    "ü§∑‚Äç‚ôÇÔ∏è –ù–µ –±–µ–¥–∞, –∏–Ω–æ–≥–¥–∞ –≤—Å–µ–º –Ω—É–∂–Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞. –ù–∞–±–µ—Ä–∏—Ç–µ /my_price_list, –∏ –º—ã –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. üöÄ",
    "üéØ –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —Å –Ω–∞—á–∞–ª–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /my_price_list, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å. –£–≤–µ—Ä–µ–Ω, –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è! üí™"
]

# –§—É–Ω–∫—Ü–∏–∏ —ç—Ç–∞–ø–æ–≤ ConversationHandler

async def start_my_price_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
    db_settings = get_user_settings(user_id)
    if db_settings:
        # –ó–∞–ø–∏—à–µ–º –≤ context.user_data, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        context.user_data["num_columns"] = db_settings["num_columns"]
        context.user_data["columns_names"] = db_settings["columns_names"]
        context.user_data["prices_gradation"] = db_settings["prices_gradation"]
        context.user_data["output_format"] = db_settings["output_format"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–≤–∞—Ä—ã
    products = get_all_products(user_id)
    if not products:
        await update.message.reply_text(
            "‚ö†Ô∏è –í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞."
        )
        return ConversationHandler.END

    # –ï—Å–ª–∏ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ –µ—Å—Ç—å => –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç
    if (
        "columns_names" in context.user_data and
        "prices_gradation" in context.user_data and
        "output_format" in context.user_data
    ):
        await choose_output_format(update, context)  # —Å—Ä–∞–∑—É –Ω–∞ –≤—ã–±–æ—Ä
        return CHOOSE_FORMAT_LIST

    # –°–±—Ä–æ—Å –æ—à–∏–±–æ–∫
    reset_error_counter(context, "columns_error")
    reset_error_counter(context, "columns_length_error")
    reset_error_counter(context, "prices_format_error")

    context.user_data["my_price_list_state"] = CHOOSE_COLUMNS

    await send_typing_action(context, update.effective_chat.id)
    await update.message.reply_text(
        "üöÄ –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–∞–π—Å-–ª–∏—Å—Ç. –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è ‚Äì –æ—Ç 1 –¥–æ 5? üòä"
    )
    return CHOOSE_COLUMNS

async def choose_columns(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if text.isdigit():
        num = int(text)
        if 1 <= num <= 5:
            reset_error_counter(context, "columns_error")
            context.user_data["num_columns"] = num
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            save_user_settings(
                user_id,
                num_columns=num  # –æ—Å—Ç–∞–ª—å–Ω–æ–µ –ø–æ–∫–∞ None
            )

            if num == 1:
                msg = (
                    "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞:\n"
                    "–ü—Ä–∏–º–µ—Ä:\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞"
                )
            else:
                msg = f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è {num} —Å—Ç–æ–ª–±—Ü–æ–≤ (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏). –ü—Ä–∏–º–µ—Ä:\n"
                for i in range(1, num + 1):
                    msg += f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ {i}\n"

            await send_typing_action(context, update.effective_chat.id)
            await update.message.reply_text(msg)
            return ENTER_COLUMNS_NAMES
        else:
            increment_error_counter(context, "columns_error")
            err_count = get_error_counter(context, "columns_error")
            if err_count < 5:
                await send_typing_action(context, update.effective_chat.id)
                await update.message.reply_text(random.choice(ERROR_MESSAGES_COLUMNS))
                return CHOOSE_COLUMNS
            else:
                await send_typing_action(context, update.effective_chat.id)
                await update.message.reply_text(random.choice(FINAL_ERROR_COLUMNS))
                return ConversationHandler.END
    else:
        increment_error_counter(context, "columns_error")
        err_count = get_error_counter(context, "columns_error")
        if err_count < 5:
            await send_typing_action(context, update.effective_chat.id)
            await update.message.reply_text(random.choice(ERROR_MESSAGES_COLUMNS))
            return CHOOSE_COLUMNS
        else:
            await send_typing_action(context, update.effective_chat.id)
            await update.message.reply_text(random.choice(FINAL_ERROR_COLUMNS))
            return ConversationHandler.END

async def enter_columns_names(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    num = context.user_data.get("num_columns")
    text = update.message.text.strip()
    lines = text.split("\n")

    if len(lines) != num:
        increment_error_counter(context, "columns_length_error")
        err_count = get_error_counter(context, "columns_length_error")
        if err_count < 5:
            await send_typing_action(context, update.effective_chat.id)
            await update.message.reply_text(
                "‚è≥ –û–π, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç–æ–ª–±—Ü–æ–≤. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑."
            )
            return ENTER_COLUMNS_NAMES
        else:
            await send_typing_action(context, update.effective_chat.id)
            await update.message.reply_text(random.choice(FINAL_ERROR_COLUMNS_LENGTH))
            return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏–π
    for col_name in lines:
        if len(col_name) > 30:
            increment_error_counter(context, "columns_length_error")
            err_count = get_error_counter(context, "columns_length_error")
            if err_count < 5:
                await send_typing_action(context, update.effective_chat.id)
                await update.message.reply_text(random.choice(ERROR_MESSAGES_COLUMNS_LENGTH))
                return ENTER_COLUMNS_NAMES
            else:
                await send_typing_action(context, update.effective_chat.id)
                await update.message.reply_text(random.choice(FINAL_ERROR_COLUMNS_LENGTH))
                return ConversationHandler.END

    reset_error_counter(context, "columns_length_error")
    context.user_data["columns_names"] = lines
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    save_user_settings(
        user_id,
        columns_names=lines  # num_columns —É–∂–µ –µ—Å—Ç—å –≤ –ë–î
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É –≥—Ä–∞–¥–∞—Ü–∏–∏ —Ü–µ–Ω
    num_columns = num
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–º–µ—Ä —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Ü–µ–Ω–∫–∞–º–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
    example_lines = [
        "0-10000 " + " ".join([f"{1000 * (i + 1)}" for i in range(num_columns)]),
        "10001-50000 " + " ".join([f"{1500 * (i + 1)}" for i in range(num_columns)]),
        "50001-100000 " + " ".join([f"{2000 * (i + 1)}" for i in range(num_columns)]),
        "100001-200000 " + " ".join([f"{7500 * (i + 1)}" for i in range(num_columns)])
    ]
    example = (
            f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≥—Ä–∞–¥–∞—Ü–∏–∏ —Ü–µ–Ω –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞.\n\n"
            f"üìã –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–ª—è {num_columns} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤:\n\n"
            + "\n".join(example_lines) +
            "\n\n–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤–≤–æ–¥–∞:\n"
            "–ü–µ—Ä–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0 –¥–æ N.\n"
            "–î–∞–ª–µ–µ –∏–¥—É—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —Ü–µ–Ω ‚Äì –∫–∞–∂–¥—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ–ª–∂–µ–Ω –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–º, –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤ —á–∏—Å–µ–ª.\n"
            "–ü—Ä–∏–º–µ—Ä: 10001-50000 —Å–ª–µ–¥—É–µ—Ç –∑–∞ 10000.\n"
            "–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ ‚Äì —ç—Ç–æ –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç N –¥–æ N, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–µ–¥–µ–ª —Ü–µ–Ω –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –≥—Ä–∞–¥–∞—Ü–∏—é.\n\n"
            f"üóíÔ∏è –í–∞–∂–Ω–æ:\n\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —á–∏—Å–ª—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∫–∞–∑–∞–ª–∏ —Ä–∞–Ω–µ–µ ({num_columns}).\n"
            f"–í –Ω–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ –∏—Ö {num_columns}: {', '.join(context.user_data['columns_names'])}.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≥—Ä–∞–¥–∞—Ü–∏–∏ —Ü–µ–Ω –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–æ–º."
    )

    await send_typing_action(context, update.effective_chat.id)
    await update.message.reply_text(example)
    return ENTER_PRICES_GRADATION

async def enter_prices_gradation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    num = context.user_data.get("num_columns")
    text = update.message.text.strip()
    lines = text.split("\n")
    gradations = []

    for line in lines:
        parts = line.split()
        if len(parts) != 1 + num:
            increment_error_counter(context, "prices_format_error")
            err_count = get_error_counter(context, "prices_format_error")
            if err_count < 5:
                await send_typing_action(context, update.effective_chat.id)
                await update.message.reply_text(random.choice(ERROR_MESSAGES_PRICES_FORMAT))
                return ENTER_PRICES_GRADATION
            else:
                await send_typing_action(context, update.effective_chat.id)
                await update.message.reply_text(random.choice(FINAL_ERROR_PRICES_FORMAT))
                return ConversationHandler.END

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏ —á–∏—Å–µ–ª
        range_part = parts[0]
        increments = parts[1:]
        if '-' in range_part:
            range_bounds = range_part.split('-')
            if len(range_bounds) != 2 or not all(rb.isdigit() for rb in range_bounds):
                increment_error_counter(context, "prices_format_error")
                err_count = get_error_counter(context, "prices_format_error")
                if err_count < 5:
                    await send_typing_action(context, update.effective_chat.id)
                    await update.message.reply_text(random.choice(ERROR_MESSAGES_PRICES_FORMAT))
                    return ENTER_PRICES_GRADATION
                else:
                    await send_typing_action(context, update.effective_chat.id)
                    await update.message.reply_text(random.choice(FINAL_ERROR_PRICES_FORMAT))
                    return ConversationHandler.END
        else:
            if not range_part.isdigit():
                increment_error_counter(context, "prices_format_error")
                err_count = get_error_counter(context, "prices_format_error")
                if err_count < 5:
                    await send_typing_action(context, update.effective_chat.id)
                    await update.message.reply_text(random.choice(ERROR_MESSAGES_PRICES_FORMAT))
                    return ENTER_PRICES_GRADATION
                else:
                    await send_typing_action(context, update.effective_chat.id)
                    await update.message.reply_text(random.choice(FINAL_ERROR_PRICES_FORMAT))
                    return ConversationHandler.END

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ü–µ–Ω–æ–∫
        for inc in increments:
            if not inc.isdigit():
                increment_error_counter(context, "prices_format_error")
                err_count = get_error_counter(context, "prices_format_error")
                if err_count < 5:
                    await send_typing_action(context, update.effective_chat.id)
                    await update.message.reply_text(random.choice(ERROR_MESSAGES_PRICES_FORMAT))
                    return ENTER_PRICES_GRADATION
                else:
                    await send_typing_action(context, update.effective_chat.id)
                    await update.message.reply_text(random.choice(FINAL_ERROR_PRICES_FORMAT))
                    return ConversationHandler.END

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∏ –Ω–∞—Ü–µ–Ω–∫–∏
        if '-' in range_part:
            start, end = map(int, range_part.split('-'))
            gradations.append((start, end, list(map(int, increments))))
        else:
            val = int(range_part)
            gradations.append((val, None, list(map(int, increments))))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    sorted_gradations = sorted(gradations, key=lambda x: x[0])
    previous_end = 0
    for i, (start, end, _) in enumerate(sorted_gradations):
        if start != previous_end + 1 and previous_end != 0:
            await send_typing_action(context, update.effective_chat.id)
            await update.message.reply_text(
                "‚ùó –î–∏–∞–ø–∞–∑–æ–Ω—ã —Ü–µ–Ω –¥–æ–ª–∂–Ω—ã –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å –¥—Ä—É–≥ –∑–∞ –¥—Ä—É–≥–æ–º –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤ —á–∏—Å–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return ENTER_PRICES_GRADATION
        if end:
            previous_end = end
        else:
            previous_end = start + 1  # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã

    # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
    reset_error_counter(context, "prices_format_error")
    context.user_data["prices_gradation"] = gradations
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    save_user_settings(
        user_id,
        prices_gradation=gradations
    )

    # >>> –°–û–û–ë–©–ê–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ, –ß–¢–û –ù–ê–°–¢–†–û–ô–ö–ò –°–û–•–†–ê–ù–ï–ù–´:
    await update.message.reply_text(
        "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
        "–ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç.\n"
        "–ß—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /restart_price_list."
    )

    await choose_output_format(update, context)
    return CHOOSE_FORMAT_LIST

async def cancel_my_price_list(update: Update, context: ContextTypes.DEFAULT_TYPE) :
    user_id = update.effective_user.id
    if user_id in USER_DATA :
        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å my_price_list
        USER_DATA[user_id].pop("my_price_list_state", None)
        USER_DATA[user_id].pop("num_columns", None)
        USER_DATA[user_id].pop("columns_names", None)
        USER_DATA[user_id].pop("prices_gradation", None)
    await update.message.reply_text(
        "–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –æ—Ç–º–µ–Ω—ë–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_price_list –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.")
    return ConversationHandler.END

async def choose_output_format(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("CSV", callback_data="CSV"),
            InlineKeyboardButton("Excel", callback_data="Excel"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞:", reply_markup=reply_markup)
    return CHOOSE_FORMAT_LIST

async def choose_format_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    choice = query.data
    if choice not in ["CSV", "Excel"]:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ CSV –∏–ª–∏ Excel.")
        return CHOOSE_FORMAT_LIST

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    context.user_data["output_format"] = choice

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    await query.edit_message_reply_markup(reply_markup=None)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    if choice == "CSV":
        await generate_price_list_csv(update, context)
    elif choice == "Excel":
        await generate_price_list_excel(update, context)

    return ConversationHandler.END

def get_my_price_list_conversation_handler():
    return ConversationHandler(
        entry_points=[CommandHandler("my_price_list", start_my_price_list)],
        states={
            CHOOSE_COLUMNS: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_columns)],
            ENTER_COLUMNS_NAMES: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_columns_names)],
            ENTER_PRICES_GRADATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_prices_gradation)],
            CHOOSE_FORMAT_LIST: [CallbackQueryHandler(choose_format_callback, pattern="^(CSV|Excel)$")],
        },
        fallbacks=[CommandHandler("cancel", cancel_my_price_list)],
        name="my_price_list_conversation",
        persistent=False
    )

def find_brand_for_model_group(model_group: str) -> str:
    """
    –ï—Å–ª–∏ –≤—Å—ë-—Ç–∞–∫–∏ –Ω–∞–¥–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±—Ä–µ–Ω–¥ ¬´–Ω–∞ –ª–µ—Ç—É¬ª,
    –Ω–æ –º—ã —Ö–æ—Ç–∏–º —è–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É PRODUCT_LIBRARY
    –∏ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å, –º–æ–∂–µ–º –Ω–µ –¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥, –µ—Å–ª–∏ —É–∂–µ
    –∑–Ω–∞–µ–º brand –ø—Ä–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏.
    """
    for brand, brand_data in PRODUCT_LIBRARY.items():
        if model_group in brand_data:
            return brand
    return "Unknown"

async def generate_price_list_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.username or f"User_{user_id}"

    columns_names = context.user_data.get("columns_names", [])
    prices_gradation = context.user_data.get("prices_gradation", [])

    # –í–º–µ—Å—Ç–æ:
    #   products = USER_DATA[user_id].get("products", [])
    #   if not products: ...
    # —Ç–µ–ø–µ—Ä—å:
    products = get_all_products(user_id)
    if not columns_names or not prices_gradation:
        await update.effective_message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /my_price_list –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return

    if not products:
        await update.effective_message.reply_text(
            "–í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã."
        )
        logging.info(f"–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} ({user_id})")
        return

    logging.info(f"[generate_price_list_csv] –ù–∞—á–∞–ª–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–π–π—Å-–ª–∏—Å—Ç–∞ CSV –¥–ª—è {user_name} ({user_id})")

    # –ó–ê–ì–†–£–ñ–ê–ï–ú "–∫–∞–∫ –±—É–¥—Ç–æ" user_data
    pseudo_data = load_pseudo_user_data(user_id)
    # —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º build_final_product_list(pseudo_data)
    best_offers = build_final_product_list(pseudo_data)

    # –î–∞–ª—å—à–µ –ª–æ–≥–∏–∫–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è:
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º flat, —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ —Ç.–¥.
    # ...
    # (–∫–æ–¥ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –∑–∞–º–µ–Ω–∏–ª–∏ products -> best_offers)
    # --------------------------------------------------------------------------------
    flat_best_offers = []
    for model_group, products_dict in best_offers.items():
        for product_name, offers in products_dict.items():
            for offer in offers:
                flat_best_offers.append({
                    "model_group": model_group,
                    "product_name": product_name,
                    "price": offer["price"],
                    "country": offer["country"],
                    "supplier": offer["suppliers"],
                    "comment": offer["comment"]
                })

    filtered_offers = [o for o in flat_best_offers if not o.get("comment", "").strip()]
    if not filtered_offers:
        await update.effective_message.reply_text(
            "‚ö†Ô∏è –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞."
        )
        logging.info(f"–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–æ–≤ —É {user_name} ({user_id})")
        return

    def get_increments_for_price(price):
        for start, end, incs in sorted(prices_gradation, key=lambda x: x[0]):
            if end is None:
                if price >= start:
                    return incs
            else:
                if start <= price <= end:
                    return incs
        return [0] * len(columns_names)

    grouped = defaultdict(list)
    for item in filtered_offers:
        grouped[item["model_group"]].append(item)

    current_date = datetime.now().strftime("%d_%m_%Y")
    filename = f"my_price_list_{current_date}.csv"

    try:
        with open(filename, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            header = ["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–°—Ç—Ä–∞–Ω–∞"] + columns_names
            writer.writerow(header)

            # –°–æ–±–ª—é–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é PRODUCT_LIBRARY
            for brand, model_groups in PRODUCT_LIBRARY.items():
                for mg in model_groups.keys():
                    if mg not in grouped:
                        continue

                    writer.writerow([mg, "–°—Ç—Ä–∞–Ω–∞"] + columns_names)

                    items = grouped[mg]

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º x["price"]:
                    sorted_items = sorted(
                        items,
                        key=lambda x : (
                            get_sort_key(brand, mg, x["product_name"]),
                            x["price"]  # <- —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã, –µ—Å–ª–∏ product_name —Å–æ–≤–ø–∞–¥–∞–µ—Ç
                        )
                    )

                    for row_item in sorted_items :
                        price_val = row_item["price"]
                        incs = get_increments_for_price(price_val)
                        new_prices = [price_val + inc for inc in incs]

                        writer.writerow([
                                            row_item["product_name"],
                                            row_item["country"]
                                        ] + new_prices)

                    # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø—ã
                    writer.writerow([])

        await send_typing_action(context, update.effective_chat.id)
        try:
            with open(filename, "rb") as f:
                await update.effective_message.reply_document(
                    document=f,
                    filename=filename,
                    caption="–í–∞—à –ø—Ä–∞–π—Å-–ª–∏—Å—Ç (CSV) –≥–æ—Ç–æ–≤!"
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ CSV: {e}")
            await update.effective_message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ CSV.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è CSV: {e}")
        await update.effective_message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞.")
    finally:
        if os.path.exists(filename):
            try:
                os.remove(filename)
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")

    logging.info(f"[generate_price_list_csv] –ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {user_name} ({user_id})")

async def generate_price_list_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.username or f"User_{user_id}"

    columns_names = context.user_data.get("columns_names", [])
    prices_gradation = context.user_data.get("prices_gradation", [])

    products = get_all_products(user_id)

    if not columns_names or not prices_gradation:
        await update.effective_message.reply_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /my_price_list ..."
        )
        return

    if not products:
        await update.effective_message.reply_text("–í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç...")
        logging.info(f"–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è {user_name} ({user_id})")
        return

    logging.info(f"[generate_price_list_excel] –°—Ç–∞—Ä—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è Excel –¥–ª—è {user_name} ({user_id})")

    # –ø—Å–µ–≤–¥–æ-–¥–∞–Ω–Ω—ã–µ
    pseudo_data = load_pseudo_user_data(user_id)
    best_offers = build_final_product_list(pseudo_data)

    # –¥–∞–ª–µ–µ –∫–æ–¥ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
    flat_best_offers = []
    for mg, prod_dict in best_offers.items():
        for product_name, offers in prod_dict.items():
            for offer in offers:
                flat_best_offers.append({
                    "model_group": mg,
                    "product_name": product_name,
                    "price": offer["price"],
                    "country": offer["country"],
                    "supplier": offer["suppliers"],
                    "comment": offer["comment"]
                })

    filtered_offers = [o for o in flat_best_offers if not o.get("comment", "").strip()]
    if not filtered_offers:
        await update.effective_message.reply_text(
            "‚ö†Ô∏è –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ..."
        )
        return

    def get_increments_for_price(price):
        for start, end, incs in sorted(prices_gradation, key=lambda x: x[0]):
            if end is None:
                if price >= start:
                    return incs
            else:
                if start <= price <= end:
                    return incs
        return [0] * len(columns_names)

    def sort_products(items) :
        return sorted(
            items,
            key=lambda x : (
                get_sort_key(
                    find_brand_for_model_group(x["model_group"]),
                    x["model_group"],
                    x["product_name"]
                ),
                x["price"]  # –≤—Ç–æ—Ä–∏—á–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π: —Ü–µ–Ω–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
            )
        )

    grouped = defaultdict(list)
    for row_item in filtered_offers:
        grouped[row_item["model_group"]].append(row_item)

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç"

    header = ["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–°—Ç—Ä–∞–Ω–∞"] + columns_names
    ws.append(header)

    bold_font = Font(bold=True)
    for cell in ws[1]:
        cell.font = bold_font

    for brand, mg_dict in PRODUCT_LIBRARY.items():
        for mg in mg_dict.keys():
            if mg not in grouped:
                continue
            ws.append([mg, "–°—Ç—Ä–∞–Ω–∞"] + columns_names)
            sorted_items = sort_products(grouped[mg])
            for row_item in sorted_items:
                incs = get_increments_for_price(row_item["price"])
                new_prices = [row_item["price"] + inc for inc in incs]
                ws.append([
                    row_item["product_name"],
                    row_item["country"]
                ] + new_prices)
            ws.append([])

    current_date = datetime.now().strftime("%d_%m_%Y")
    filename = f"my_price_list_{current_date}.xlsx"

    try:
        wb.save(filename)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Excel: {e}")
        await update.effective_message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞.")
        return

    await send_typing_action(context, update.effective_chat.id)
    try:
        with open(filename, "rb") as f:
            await update.effective_message.reply_document(
                document=f,
                filename=filename,
                caption="–í–∞—à –ø—Ä–∞–π—Å-–ª–∏—Å—Ç Excel –≥–æ—Ç–æ–≤!"
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel: {e}")
        await update.effective_message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Excel.")
    finally:
        if os.path.exists(filename):
            try:
                os.remove(filename)
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {filename}: {e}")

    logging.info(f"[generate_price_list_excel] –ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {user_name} ({user_id})")

async def restart_price_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –û—á–∏—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î –∏ –∏–∑ context
    clear_user_settings(user_id)

    keys_to_remove = ["my_price_list_state", "num_columns", "columns_names", "prices_gradation", "output_format"]
    for key in keys_to_remove:
        context.user_data.pop(key, None)

    await update.message.reply_text(
        "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ —Å–±—Ä–æ—à–µ–Ω—ã. –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /my_price_list –≤—ã –Ω–∞—á–Ω—ë—Ç–µ –∑–∞–Ω–æ–≤–æ."
    )
    return ConversationHandler.END


# ------------------------------ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø BEST------------------------------

def build_final_product_list(user_data: dict) -> Dict[str, Dict[str, List[Dict[str, Any]]]]:
    """
    –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ user_data, –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏—Ö –ø–æ model_group, product_name –∏ country,
    –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–∏ 1-5 –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç final_product_list.

    –ù–æ–≤—ã–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏:
      1. –ï—Å–ª–∏ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Ç–æ–≤–∞—Ä (model_group, product_name) –∏–º–µ–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é price,
         –∏ —Å—Ä–µ–¥–∏ –Ω–∏—Ö –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç(—ã) —Å–æ —Å—Ç—Ä–∞–Ω–æ–π –∏ –±–µ–∑ ‚Äì –ø—Ä–∏ —Ä–∞–≤–Ω–æ–π —Ü–µ–Ω–µ
         —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç(—ã) —Å–æ —Å—Ç—Ä–∞–Ω–æ–π, —É–¥–∞–ª—è–µ–º –±–µ–∑-—Å—Ç—Ä–∞–Ω—ã.
      2. –ï—Å–ª–∏ —É –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è price, –æ–¥–Ω–∞ –∏ —Ç–∞ –∂–µ —Å—Ç—Ä–∞–Ω–∞, –Ω–æ —Ä–∞–∑–Ω—ã–µ supplier ‚Äî
         –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ "–ª—É—á—à–µ–≥–æ" –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É supplier.
      3. –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –µ—Å–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Ü–µ–Ω–æ–π –±–µ–∑ —Å—Ç—Ä–∞–Ω—ã ‚Äî
         –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É.
      4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —à–∞–≥: –µ—Å–ª–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ (model_group, product_name) –∏–º–µ—é—Ç—Å—è –∑–∞–ø–∏—Å–∏ —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–æ–π
         –∏ —Å –ø—É—Å—Ç–æ–π (""), —Ç–æ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–∞–Ω–æ–π –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö —Ü–µ–Ω–∞ –Ω–∏–∂–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞
         –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ —Å—Ä–µ–¥–∏ –∑–∞–ø–∏—Å–µ–π —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–æ–π.
    """
    products_data = user_data.get("products", [])
    grouped_products: Dict[Tuple[str, str, str], List[Dict[str, Any]]] = defaultdict(list)

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ (model_group, product_name, country)
    for message_data in products_data :
        line = message_data.get("line", "")
        country = message_data.get("country", "")
        product_name = message_data.get("product_name")
        model_group = message_data.get("model_group")
        price = message_data.get("price")
        supplier = message_data.get("supplier") or ""  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
        comment = message_data.get("comment", "")

        if not product_name or not model_group or price is None :
            logging.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö: {line}")
            continue

        group_key = (model_group, product_name, country)
        grouped_products[group_key].append({
            "price" : price,
            "supplier" : supplier,
            "comment" : comment
        })

        if not product_name or not model_group or price is None:
            logging.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö: {line}")
            continue

        group_key = (model_group, product_name, country)
        grouped_products[group_key].append({
            "price": price,
            "supplier": supplier,
            "comment": comment
        })

    final_product_data: Dict[Tuple[str, str, str], List[Dict[str, Any]]] = {}

    # –®–∞–≥ 1: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ price / supplier / comment)
    for key, raw_products in grouped_products.items():
        unique_offers = []
        seen_offers = set()
        for p in raw_products:
            offer_tuple = (p["price"], p["supplier"], p["comment"])
            if offer_tuple not in seen_offers:
                unique_offers.append(p)
                seen_offers.add(offer_tuple)
        grouped_products[key] = unique_offers

    # –®–∞–≥ 2: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ (model_group, product_name) –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç country
    mg_pn_map: Dict[Tuple[str, str], List[Tuple[str, int, str, str]]] = defaultdict(list)
    for (mg, pn, ctr), offers in grouped_products.items():
        for p in offers:
            mg_pn_map[(mg, pn)].append((ctr, p["price"], p["supplier"], p["comment"]))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã (model_group, product_name)
    new_grouped_products: Dict[Tuple[str, str, str], List[Dict[str, Any]]] = defaultdict(list)
    for (mg, pn), items in mg_pn_map.items():
        # –°–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ —Ü–µ–Ω–µ
        price_map: Dict[int, List[Tuple[str, str, str]]] = defaultdict(list)
        for (ctr, pr, sup, cmt) in items:
            price_map[pr].append((ctr, sup, cmt))
        # –î–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–Ω—ã
        for pr_value, sublist in price_map.items():
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–æ–π, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö
            has_known_country = any(ctr != "" for (ctr, sup, cmt) in sublist)
            if has_known_country:
                sublist = [(ctr, sup, cmt) for (ctr, sup, cmt) in sublist if ctr != ""]
            # –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã (–∏–ª–∏ –ø—É—Å—Ç–æ–π) —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Ü–µ–Ω–æ–π –≤—ã–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ supplier
            country_map: Dict[str, List[Tuple[str, str]]] = defaultdict(list)
            for (ctr, sup, cmt) in sublist:
                country_map[ctr].append((sup, cmt))
            for ctr, sup_list in country_map.items():
                if len(sup_list) > 1:
                    sup_list_sorted = sorted(sup_list, key=lambda x: x[0].lower())
                    best_sup, best_cmt = sup_list_sorted[0]
                    new_grouped_products[(mg, pn, ctr)].append({
                        "price": pr_value,
                        "supplier": best_sup,
                        "comment": best_cmt
                    })
                else:
                    single_sup, single_cmt = sup_list[0]
                    new_grouped_products[(mg, pn, ctr)].append({
                        "price": pr_value,
                        "supplier": single_sup,
                        "comment": single_cmt
                    })

    # –®–∞–≥ 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–µ:
    # –î–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã (model_group, product_name), –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∑–∞–ø–∏—Å–∏ —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–æ–π,
    # —É–¥–∞–ª—è–µ–º –∏–∑ –≥—Ä—É–ø–ø—ã –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–∞–Ω–æ–π, –µ—Å–ª–∏ –∏—Ö —Ü–µ–Ω–∞ –≤—ã—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã —Å—Ä–µ–¥–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö.
    final_group: Dict[Tuple[str, str], List[Dict[str, Any]]] = defaultdict(list)
    for (mg, pn, ctr), recs in new_grouped_products.items():
        final_group[(mg, pn)].extend([dict(record, country=ctr) for record in recs])
    adjusted_group: Dict[Tuple[str, str, str], List[Dict[str, Any]]] = {}
    for (mg, pn), recs in final_group.items():
        # –ù–∞–π–¥–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Å—Ä–µ–¥–∏ –∑–∞–ø–∏—Å–µ–π —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–æ–π (ctr != "")
        known = [r for r in recs if r["country"] != ""]
        min_known_price = min((r["price"] for r in known), default=None)
        for r in recs:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –±–µ–∑ —Å—Ç—Ä–∞–Ω—ã –∏ –∏–º–µ–µ—Ç—Å—è –∑–∞–ø–∏—Å—å —Å–æ —Å—Ç—Ä–∞–Ω–æ–π, —Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –µ—ë —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë —Ü–µ–Ω–∞ <= min_known_price
            if r["country"] == "" and min_known_price is not None and r["price"] > min_known_price:
                continue
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á (mg, pn, r["country"]) –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã
            key = (mg, pn, r["country"])
            adjusted_group.setdefault(key, []).append(r)
    grouped_products = adjusted_group

    # –®–∞–≥ 4: –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ 1-5 –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã (mg, pn, ctr)
    final_product_data: Dict[Tuple[str, str, str], List[Dict[str, Any]]] = {}
    for key, products in grouped_products.items():
        model_group, product_name, country = key
        if not products:
            continue

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –±–µ–∑
        with_comments = [p for p in products if p["comment"].strip()]
        without_comments = [p for p in products if not p["comment"].strip()]

        # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        min_price = min(p["price"] for p in products)

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
        min_price_offers = [p for p in products if p["price"] == min_price]

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –±–µ–∑
        min_price_with_comments = [p for p in min_price_offers if p["comment"].strip()]
        min_price_without_comments = [p for p in min_price_offers if not p["comment"].strip()]

        if with_comments and without_comments:
            # –°—Ü–µ–Ω–∞—Ä–∏–∏ 2 –∏ 4
            min_price_without = min(p["price"] for p in without_comments)
            min_price_with = min(p["price"] for p in with_comments)
            if min_price_with <= min_price_without:
                best_without = [p for p in without_comments if p["price"] == min_price_without]
                best_with = [p for p in with_comments if p["price"] <= min_price_without]
                final_product_data[key] = best_without + best_with
            else:
                best_without = [p for p in without_comments if p["price"] == min_price_without]
                final_product_data[key] = best_without
        elif with_comments and not without_comments:
            final_product_data[key] = with_comments
        elif without_comments and not with_comments:
            min_price_without = min(p["price"] for p in without_comments)
            best_without = [p for p in without_comments if p["price"] == min_price_without]
            final_product_data[key] = best_without
        else:
            final_product_data[key] = products

    # –®–∞–≥ 5: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    final_product_list: Dict[str, Dict[str, List[Dict[str, Any]]]] = defaultdict(dict)
    for (mg, product_name, country), products in final_product_data.items():
        if product_name not in final_product_list[mg]:
            final_product_list[mg][product_name] = []
        for product in products:
            final_product_list[mg][product_name].append({
                "price": product["price"],
                "country": country,
                "suppliers": product["supplier"],
                "comment": product["comment"]
            })

    return final_product_list

def build_final_product_list_for_brand(
    user_data: dict,
    selected_brand: str
) -> Dict[str, Dict[str, List[Dict[str, Any]]]]:
    """
    –û–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ build_final_product_list:
    - —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã,
    - –µ—Å–ª–∏ selected_brand != "ALL", –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ model_group,
      —á—Ç–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –Ω—É–∂–Ω–æ–º—É brand (–ø–æ PRODUCT_LIBRARY).
    """
    all_products = build_final_product_list(user_data)
    if selected_brand == "ALL":
        return all_products

    # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞ —É—Ä–æ–≤–Ω–µ model_group, –∏—Å—Ö–æ–¥—è –∏–∑ PRODUCT_LIBRARY[selected_brand]
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ model_group, —á—Ç–æ –µ—Å—Ç—å —É –¥–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞.
    filtered_products: Dict[str, Dict[str, List[Dict[str, Any]]]] = {}
    if selected_brand not in PRODUCT_LIBRARY:
        # –ï—Å–ª–∏ –ø–æ—á–µ–º—É-—Ç–æ –±—Ä–µ–Ω–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–µ—Ä–Ω—ë–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        return {}

    brand_data = PRODUCT_LIBRARY[selected_brand]  # –ù–∞–ø—Ä–∏–º–µ—Ä, {"iPhone 14": {}, "iPhone 13": {}}
    for model_group in brand_data.keys():
        if model_group in all_products:
            filtered_products[model_group] = all_products[model_group]

    return filtered_products

async def send_csv(
    message: Message,
    context: ContextTypes.DEFAULT_TYPE,
    final_product_list: Dict[str, Dict[str, List[Dict[str, Any]]]],
    file_prefix: str = "best_"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è best
):
    logging.info("–§–æ—Ä–º–∏—Ä—É–µ–º CSV...")

    current_date = datetime.now().strftime("%d_%m_%Y")

    with tempfile.NamedTemporaryFile(delete=False, suffix=".csv", mode="w", newline="", encoding="utf-8") as temp_file:
        csv_filename = temp_file.name
        csv_writer = csv.writer(temp_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
        main_header = ["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–°—Ç—Ä–∞–Ω—ã", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]
        csv_writer.writerow(main_header)

        for brand in PRODUCT_LIBRARY:
            for model_group in PRODUCT_LIBRARY[brand]:
                if model_group not in final_product_list:
                    continue

                csv_writer.writerow([model_group, "–¶–µ–Ω–∞", "–°—Ç—Ä–∞–Ω—ã", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])

                products = final_product_list[model_group]
                flattened_products = [
                    (product_name, entry)
                    for product_name, entries in products.items()
                    for entry in entries
                ]

                sorted_products = sorted(
                    flattened_products,
                    key=lambda x: (
                        get_sort_key(brand, model_group, x[0]),
                        x[1]["price"]
                    )
                )

                for product_name, entry in sorted_products:
                    csv_writer.writerow([
                        product_name,
                        entry["price"],
                        entry["country"],
                        entry["suppliers"],
                        entry["comment"]
                    ])
                csv_writer.writerow([])

    file_name = f"{file_prefix}{current_date}.csv"  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å

    try:
        with open(csv_filename, "rb") as f:
            await message.reply_document(
                document=f,
                filename=file_name,
                caption="–í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (CSV, –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç) –≥–æ—Ç–æ–≤!"
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ CSV: {e}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ CSV.")
    finally:
        if os.path.exists(csv_filename):
            try:
                os.remove(csv_filename)
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {csv_filename}: {e}")

async def send_csv_flat(
    message: Message,
    context: ContextTypes.DEFAULT_TYPE,
    final_product_list: Dict[str, Dict[str, List[Dict[str, Any]]]],
    file_prefix: str = "best_"
):
    logging.info("–§–æ—Ä–º–∏—Ä—É–µ–º CSV (–ü–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)...")

    current_date = datetime.now().strftime("%d_%m_%Y")

    with tempfile.NamedTemporaryFile(delete=False, suffix=".csv", mode="w", newline="", encoding="utf-8") as temp_file:
        csv_filename = temp_file.name
        csv_writer = csv.writer(temp_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
        header = ["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–°—Ç—Ä–∞–Ω—ã", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ì—Ä—É–ø–ø–∞"]
        csv_writer.writerow(header)

        # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ PRODUCT_LIBRARY, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑—å –±—Ä–µ–Ω–¥/–º–æ–¥–µ–ª—å
        for brand in PRODUCT_LIBRARY:
            for model_group in PRODUCT_LIBRARY[brand]:
                if model_group not in final_product_list:
                    continue
                products = final_product_list[model_group]
                flattened_products = [
                    (product_name, entry)
                    for product_name, entries in products.items()
                    for entry in entries
                ]
                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ get_sort_key –∏ —Ü–µ–Ω–µ
                sorted_products = sorted(
                    flattened_products,
                    key=lambda x: (get_sort_key(brand, model_group, x[0]), x[1]["price"])
                )
                for product_name, entry in sorted_products:
                    csv_writer.writerow([
                        product_name,
                        entry["price"],
                        entry["country"],
                        entry["suppliers"],
                        entry["comment"],
                        model_group,  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äì –º–æ–¥–µ–ª—å
                        brand       # –ì—Ä—É–ø–ø–∞ ‚Äì –±—Ä–µ–Ω–¥
                    ])
    file_name = f"{file_prefix}{current_date}.csv"
    try:
        with open(csv_filename, "rb") as f:
            await message.reply_document(
                document=f,
                filename=file_name,
                caption="–í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (CSV, –ü–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç) –≥–æ—Ç–æ–≤!"
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ CSV: {e}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ CSV.")
    finally:
        if os.path.exists(csv_filename):
            try:
                os.remove(csv_filename)
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {csv_filename}: {e}")

async def send_excel(
    message: Message,
    context: ContextTypes.DEFAULT_TYPE,
    final_product_list: Dict[str, Dict[str, List[Dict[str, Any]]]],
    file_prefix: str = "best_"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è best
):
    logging.info("–§–æ—Ä–º–∏—Ä—É–µ–º Excel...")

    current_date = datetime.now().strftime("%d_%m_%Y")

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Best Prices"

    headers = ["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–°—Ç—Ä–∞–Ω—ã", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]
    for col_idx, val in enumerate(headers, start=1):
        ws.cell(row=1, column=col_idx, value=val)

    row_idx = 2
    yellow_fill = PatternFill(start_color="FFFF00", end_color="FFFF00", fill_type="solid")

    for brand in PRODUCT_LIBRARY:
        for model_group in PRODUCT_LIBRARY[brand]:
            if model_group not in final_product_list:
                continue

            ws.cell(row=row_idx, column=1, value=model_group)
            for col in range(1, len(headers)+1):
                ws.cell(row=row_idx, column=col).fill = yellow_fill
            row_idx += 1

            flattened_products = [
                (product_name, entry)
                for product_name, entries in final_product_list[model_group].items()
                for entry in entries
            ]

            sorted_products = sorted(
                flattened_products,
                key=lambda x: (
                    get_sort_key(brand, model_group, x[0]),
                    x[1]["price"]
                )
            )

            for product_name, entry in sorted_products:
                ws.cell(row=row_idx, column=1, value=product_name)
                ws.cell(row=row_idx, column=2, value=entry["price"])
                ws.cell(row=row_idx, column=3, value=entry["country"])
                ws.cell(row=row_idx, column=4, value=entry["suppliers"])
                ws.cell(row=row_idx, column=5, value=entry["comment"])
                row_idx += 1

    with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
        excel_filename = tmp.name
    wb.save(excel_filename)

    file_name = f"{file_prefix}{current_date}.xlsx"  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å


    try:
        with open(excel_filename, "rb") as f:
            await message.reply_document(
                document=f,
                filename=file_name,
                caption="–í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (Excel, –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç) –≥–æ—Ç–æ–≤!"
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Excel: {e}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Excel.")
    finally:
        if os.path.exists(excel_filename):
            try:
                os.remove(excel_filename)
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {excel_filename}: {e}")

async def send_excel_flat(
    message: Message,
    context: ContextTypes.DEFAULT_TYPE,
    final_product_list: Dict[str, Dict[str, List[Dict[str, Any]]]],
    file_prefix: str = "best_"  # –∏–ª–∏ "markup_" / "gradmark_" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã
):
    logging.info("–§–æ—Ä–º–∏—Ä—É–µ–º Excel (–ü–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)...")

    current_date = datetime.now().strftime("%d_%m_%Y")
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Best Prices Flat"

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –ì—Ä—É–ø–ø–∞
    headers = ["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–°—Ç—Ä–∞–Ω—ã", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ì—Ä—É–ø–ø–∞"]
    for col_idx, header in enumerate(headers, start=1):
        cell = ws.cell(row=1, column=col_idx, value=header)
        cell.font = Font(bold=True)

    row_idx = 2

    # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ PRODUCT_LIBRARY –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –±—Ä–µ–Ω–¥–æ–≤ –∏ –≥—Ä—É–ø–ø
    for brand in PRODUCT_LIBRARY:
        for model_group in PRODUCT_LIBRARY[brand]:
            if model_group not in final_product_list:
                continue

            products = final_product_list[model_group]
            # "–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º" —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ø–∏—Å–æ–∫ –ø–∞—Ä: (product_name, entry)
            flattened_products = [
                (product_name, entry)
                for product_name, entries in products.items()
                for entry in entries
            ]
            # –ú–Ω–æ–≥–æ–∫—Ä–∏—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ get_sort_key –∏ —Ü–µ–Ω–µ
            sorted_products = sorted(
                flattened_products,
                key=lambda x: (get_sort_key(brand, model_group, x[0]), x[1]["price"])
            )
            for product_name, entry in sorted_products:
                ws.cell(row=row_idx, column=1, value=product_name)
                ws.cell(row=row_idx, column=2, value=entry["price"])
                ws.cell(row=row_idx, column=3, value=entry["country"])
                ws.cell(row=row_idx, column=4, value=entry["suppliers"])
                ws.cell(row=row_idx, column=5, value=entry["comment"])
                ws.cell(row=row_idx, column=6, value=model_group)  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                ws.cell(row=row_idx, column=7, value=brand)          # –ì—Ä—É–ø–ø–∞
                row_idx += 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º Excel –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
        excel_filename = tmp.name
    wb.save(excel_filename)

    file_name = f"{file_prefix}{current_date}.xlsx"

    try:
        with open(excel_filename, "rb") as f:
            await message.reply_document(
                document=f,
                filename=file_name,
                caption="–í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (Excel, –ü–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç) –≥–æ—Ç–æ–≤!"
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Excel: {e}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Excel.")
    finally:
        if os.path.exists(excel_filename):
            try:
                os.remove(excel_filename)
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {excel_filename}: {e}")

def generate_text_messages(
        final_product_list: Dict[str, Dict[str, List[Dict[str, Any]]]],
        PRODUCT_LIBRARY: Dict[str, Dict[str, Any]],
        include_comments: bool
) -> List[str] :
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–∞–∂–¥–æ–µ ‚â§ 4096 —Å–∏–º–≤–æ–ª–æ–≤) –≤ HTML-—Ä–∞–∑–º–µ—Ç–∫–µ,
    —á—Ç–æ–±—ã –∏—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ Telegram —Å parse_mode="HTML".

    1. –ë—Ä–µ–Ω–¥ –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, –∂–∏—Ä–Ω—ã–º –∫—É—Ä—Å–∏–≤–æ–º:
       <b><i>{BRAND}</i></b>

    2. –ò–∑–±–µ–≥–∞–µ–º —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –±—Ä–µ–Ω–¥ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
       –±–µ–∑ –≥—Ä—É–ø–ø (model_group) –ø–æ—Å–ª–µ –Ω–µ–≥–æ. –ï—Å–ª–∏ –≤–∏–¥–∏–º, —á—Ç–æ –Ω–µ –≤–ª–µ–∑–∞–µ—Ç
       "–±—Ä–µ–Ω–¥ + —Ö–æ—Ç—è –±—ã –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞" –≤ —Ç–µ–∫—É—â–∏–π chunk, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º
       (–Ω–µ –ø–∏—à–µ–º –±—Ä–µ–Ω–¥ –≤ –∫–æ–Ω–µ—Ü) –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (chunk) —Å —ç—Ç–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –∏ –≥—Ä—É–ø–ø.

    3. –ï—Å–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ (model_group) —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞ –∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è
       –¥–∞–∂–µ –≤ –ø—É—Å—Ç–æ–π chunk, —Ç–æ –∏–¥—ë—Ç –¥—Ä–æ–±–ª–µ–Ω–∏–µ: —á–∞—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏,
       —á–∞—Å—Ç—å ‚Äî –≤ –¥—Ä—É–≥–æ–º. –ü—Ä–∏ —ç—Ç–æ–º –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –∫—É—Å–æ–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞
       model_group, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ç–µ—Ä—è–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç.

    :param final_product_list: –∏—Ç–æ–≥–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á ‚Äì –∏–º—è –º–æ–¥–µ–ª–∏ (model_group),
                               –∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (—Å–ª–æ–≤–∞—Ä–µ–π)
    :param PRODUCT_LIBRARY: –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    :param include_comments: –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã, –∏–º–µ—é—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    :return: —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–∞–∂–¥–æ–µ ‚â§ 4096 —Å–∏–º–≤–æ–ª–æ–≤) —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    """

    # --------------------------
    # –®–ê–ì 1. –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É: [ {brand, model_groups: [ {model_group, block_lines: [..—Å—Ç—Ä–æ–∫–∏..]}, ... ]}, ... ]
    # --------------------------
    brand_blocks = []

    for brand in PRODUCT_LIBRARY :
        model_groups_data = []
        any_model_group_exists = False

        for model_group in PRODUCT_LIBRARY[brand] :
            if model_group not in final_product_list :
                continue

            products_dict = final_product_list[model_group]
            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π model_group
            if not products_dict :
                continue

            any_model_group_exists = True

            # 1. "–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º" —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ø–∏—Å–æ–∫ –ø–∞—Ä (product_name, entry)
            flattened_products = [
                (product_name, entry)
                for product_name, entries in products_dict.items()
                for entry in entries
            ]

            # 2. –ú–Ω–æ–≥–æ–∫—Ä–∏—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:
            #    - –°–Ω–∞—á–∞–ª–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É get_sort_key(brand, model_group, product_name)
            #    - –ó–∞—Ç–µ–º –ø–æ —Ü–µ–Ω–µ (entry["price"]) ‚Äî –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
            sorted_flattened = sorted(
                flattened_products,
                key=lambda x : (
                    get_sort_key(brand, model_group, x[0]),
                    x[1]["price"]
                )
            )

            # 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞
            product_lines = []
            for product_name, entry in sorted_flattened :
                price = entry["price"]
                comment = entry["comment"].strip()
                country_name = entry["country"].strip()

                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏, –∞ —Ç–æ–≤–∞—Ä –∏–º–µ–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if not include_comments and comment :
                    continue

                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è HTML
                product_name_html = escape_html(product_name)
                comment_html = escape_html(comment) if comment else ""
                country_emoji = TEXT_TO_FLAG.get(country_name, escape_html(country_name))
                formatted_price = f"{price:,}".replace(",", ".")

                line_str = f"{product_name_html} ‚Äì {formatted_price} {country_emoji}"
                if include_comments and comment_html :
                    line_str += f" {comment_html}"

                product_lines.append(line_str)

            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ—á–µ–≥–æ –≤—ã–≤–æ–¥–∏—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if not product_lines :
                continue

            # 4. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ model_group –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫
            mg_header = f"<b>{escape_html(model_group)}</b>"
            block_lines = [mg_header, ""] + product_lines + [""]

            model_groups_data.append({
                "model_group" : model_group,
                "block_lines" : block_lines
            })

        if any_model_group_exists and model_groups_data :
            brand_blocks.append({
                "brand" : brand,
                "model_groups" : model_groups_data
            })

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–æ–±—â–µ –Ω–µ—á–µ–≥–æ –≤—ã–≤–æ–¥–∏—Ç—å:
    if not brand_blocks :
        return []

    # --------------------------
    # –®–ê–ì 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è
    # --------------------------
    messages: List[str] = []
    current_chunk = ""

    def get_length_if_added(base: str, new_line: str) -> int :
        """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –∫ 'base' –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É 'new_line' (—á–µ—Ä–µ–∑ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏)."""
        if not base :
            return len(new_line)
        else :
            return len(base) + 1 + len(new_line)

    def finalize_chunk() :
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç current_chunk –≤ messages, –æ–±—Ä–µ–∑–∞—è –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º –∏ –¥–µ–ª–∞—è reset."""
        nonlocal current_chunk
        trimmed = current_chunk.strip()
        if trimmed :
            messages.append(trimmed)
        current_chunk = ""

    def try_add_line(line: str, chunk: str) -> bool :
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–ª–µ–∑–µ—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ 'line' –≤ —Ç–µ–∫—Å—Ç 'chunk' (—á–µ—Ä–µ–∑ \n),
        –Ω–µ –ø—Ä–µ–≤—ã—à–∞—è MAX_TELEGRAM_TEXT.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True/False.
        """
        needed_len = get_length_if_added(chunk, line)
        return (needed_len <= MAX_TELEGRAM_TEXT)

    def add_line(line: str) :
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É line –≤ current_chunk (—Å –ø–µ—Ä–µ–≤–æ–¥–æ–º —Å—Ç—Ä–æ–∫–∏), –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—è, —á—Ç–æ –æ–Ω–∞ –≤–ª–µ–∑–µ—Ç."""
        nonlocal current_chunk
        if not current_chunk :
            current_chunk = line
        else :
            current_chunk += "\n" + line

    def fits_block_in_chunk(block_lines: List[str], chunk: str) -> bool :
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ —Ü–µ–ª–∏–∫–æ–º block_lines –≤ —Ç–µ–∫—É—â–∏–π chunk (–Ω–µ –ø—Ä–µ–≤—ã—à–∞—è –ª–∏–º–∏—Ç–∞).
        """
        temp_len = len(chunk)
        sep_count = 0 if not chunk else len(block_lines)  # –∫–æ–ª-–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—Ç—Ä–æ–∫, –µ—Å–ª–∏ chunk –Ω–µ –ø—É—Å—Ç

        total_needed = temp_len + sum(len(line) for line in block_lines) + sep_count
        return total_needed <= MAX_TELEGRAM_TEXT

    def fits_block_in_empty_chunk(block_lines: List[str]) -> bool :
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ —Ü–µ–ª–∏–∫–æ–º block_lines –≤ –ü–£–°–¢–û–ô chunk (–Ω–µ –ø—Ä–µ–≤—ã—à–∞—è –ª–∏–º–∏—Ç–∞).
        """
        if not block_lines :
            return True
        lines_len = sum(len(line) for line in block_lines)
        # –ü—Ä–∏ —Å–∫–ª–µ–∏–≤–∞–Ω–∏–∏ N —Å—Ç—Ä–æ–∫ –±—É–¥–µ—Ç N-1 –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—Ç—Ä–æ–∫–∏
        lines_len += (len(block_lines) - 1) if len(block_lines) > 1 else 0
        return lines_len <= MAX_TELEGRAM_TEXT

    def add_block_with_split(block_lines: List[str]) :
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç block_lines –≤ current_chunk, –µ—Å–ª–∏ —Ü–µ–ª–∏–∫–æ–º –Ω–µ –≤–ª–µ–∑–∞–µ—Ç ‚Äî –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π message.
        –ï—Å–ª–∏ –¥–∞–∂–µ –≤ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤–ª–µ–∑–∞–µ—Ç, –¥—Ä–æ–±–∏–º block_lines —á–∞—Å—Ç—è–º–∏ (–≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã).
        –ü—Ä–∏ –¥—Ä–æ–±–ª–µ–Ω–∏–∏ –≤ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ **—Å–Ω–∞—á–∞–ª–∞** –ø–µ—á–∞—Ç–∞–µ—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã
        (–∏, –≤–æ–∑–º–æ–∂–Ω–æ, –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞).
        """
        nonlocal current_chunk

        # –ü—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ç–µ–∫—É—â–∏–π chunk (—Ü–µ–ª–∏–∫–æ–º)
        if fits_block_in_chunk(block_lines, current_chunk) :
            # –í–ª–µ–∑–∞–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
            for line in block_lines :
                add_line(line)
        else :
            # –ù–µ –≤–ª–µ–∑–∞–µ—Ç –≤ —Ç–µ–∫—É—â–∏–π chunk
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ –∏ –ø—Ä–æ–±—É–µ–º –≤ –ø—É—Å—Ç–æ–π chunk
            finalize_chunk()

            if fits_block_in_empty_chunk(block_lines) :
                # –í –ø—É—Å—Ç–æ–π chunk –≤—Å—ë –≤–ª–µ–∑–∞–µ—Ç
                for line in block_lines :
                    add_line(line)
            else :
                # –î–∞–∂–µ –≤ –ø—É—Å—Ç–æ–π –Ω–µ –≤–ª–µ–∑–∞–µ—Ç => –¥—Ä–æ–±–∏–º –≤–Ω—É—Ç—Ä–∏ —Å–∞–º–æ–π –≥—Ä—É–ø–ø—ã
                add_block_in_parts(block_lines)

    def add_block_in_parts(block_lines: List[str]) :
        """
        –î—Ä–æ–±–∏–º block_lines –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø–æ–≤—Ç–æ—Ä—è—è ¬´—à–∞–ø–∫—É¬ª (–ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏),
        –µ—Å–ª–∏ –Ω—É–∂–Ω–æ. –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ block_lines ‚Äî —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–µ–ª–∏,
        –≤—Ç–æ—Ä–∞—è ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–∞—è (–¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç—Å—Ç—É–ø–∞), –∞ –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî —Ç–æ–≤–∞—Ä—ã.
        –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ç–µ—Ä—è–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç, –º—ã –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É) –≤ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
        """
        nonlocal current_chunk
        if not block_lines :
            return

        # –í—ã–¥–µ–ª—è–µ–º ¬´—à–∞–ø–∫—É¬ª (–∑–∞–≥–æ–ª–æ–≤–æ–∫, –≤–æ–∑–º–æ–∂–Ω–æ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É)
        #  - –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–æ—á–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        #  - –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ –ø—É—Å—Ç–∞—è, —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ–º —á–∞—Å—Ç—å—é ¬´—à–∞–ø–∫–∏¬ª
        header_lines = [block_lines[0]]
        idx = 1
        if len(block_lines) > 1 and not block_lines[1].strip() :
            header_lines.append(block_lines[1])
            idx = 2

        body_lines = block_lines[idx :]

        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π chunk
        finalize_chunk()
        current_chunk = ""

        # –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º —à–∞–ø–∫—É
        for hl in header_lines :
            # –ï—Å–ª–∏ –¥–∞–∂–µ —à–∞–ø–∫–∞ –Ω–µ –≤–ª–µ–∑–∞–µ—Ç, –ø—Ä–∏–¥—ë—Ç—Å—è –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å
            if not try_add_line(hl, current_chunk) :
                finalize_chunk()
                # –ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ –ª–µ–∑–µ—Ç, –ø—Ä–∏–¥—ë—Ç—Å—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–∏–ª–∏ –∫–∞–∫-—Ç–æ –µ—â—ë –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å)
                continue
            add_line(hl)  # —Ä–µ–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º

        # –î–∞–ª–µ–µ ¬´–ø–æ—à—Ç—É—á–Ω–æ¬ª –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ body_lines
        for bl in body_lines :
            if not try_add_line(bl, current_chunk) :
                # –ù–µ –≤–ª–µ–∑–∞–µ—Ç ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–π chunk, –ø–æ–≤—Ç–æ—Ä—è–µ–º —à–∞–ø–∫—É
                finalize_chunk()
                current_chunk = ""
                for hl in header_lines :
                    if not try_add_line(hl, current_chunk) :
                        # –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–µ–ª–∞—Ç—å
                        continue
                    add_line(hl)

                # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º —Å–∞–º —Ç–æ–≤–∞—Ä
                if try_add_line(bl, current_chunk) :
                    add_line(bl)
                else :
                    # –î–∞–∂–µ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –≤–ª–µ–∑–∞–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏–º
                    finalize_chunk()
                    continue
            else :
                # –í–ª–µ–∑–∞–µ—Ç
                add_line(bl)

    # --------------------------
    # –®–ê–ì 3. –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –¥–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏ –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤ –∏ –≥—Ä—É–ø–ø, –∏–∑–±–µ–≥–∞—è "–±—Ä–µ–Ω–¥–∞ –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ –≤ –∫–æ–Ω—Ü–µ"
    # --------------------------

    last_brand = None

    for brand_block in brand_blocks :
        brand = brand_block["brand"]  # –ù–∞–ø—Ä–∏–º–µ—Ä, "Apple"
        mg_list = brand_block["model_groups"]  # –°–ø–∏—Å–æ–∫ { model_group, block_lines }

        brand_upper = brand.upper()
        brand_header = f"<b><i>{escape_html(brand_upper)}</i></b>"

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π model_group –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞.
        # –ù–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ *—É–±–µ–¥–∏—Ç—å—Å—è*, —á—Ç–æ –º—ã –Ω–µ ¬´–ø–æ–≤–µ—Å–∏–º¬ª –±—Ä–µ–Ω–¥ –≤ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ chunk,
        # –µ—Å–ª–∏ —Ç—É–¥–∞ –Ω–µ –≤–ª–µ–∑–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –≥—Ä—É–ø–ø–∞.

        for idx_mg, mg_item in enumerate(mg_list) :
            mg_block_lines = mg_item["block_lines"]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ –º—ã ¬´–≤—Å—Ç–∞–≤–ª—è–ª–∏¬ª —ç—Ç–æ—Ç brand –≤ —Ç–µ–∫—É—â–∏–π chunk
            brand_already_printed = (brand == last_brand and current_chunk.strip() != "")

            # –ï—Å–ª–∏ –º—ã –µ—â—ë –ù–ï –ø–µ—á–∞—Ç–∞–ª–∏ —ç—Ç–æ—Ç –±—Ä–µ–Ω–¥ –≤ —Ç–µ–∫—É—â–µ–º chunk, —Ç–æ —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏–º brand + —Å—Ä–∞–∑—É —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
            if not brand_already_printed :
                # 1. –ü–æ–ø—Ä–æ–±—É–µ–º ¬´–≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ¬ª –¥–æ–±–∞–≤–∏—Ç—å brand + mg_block_lines –≤ —Ç–µ–∫—É—â–∏–π chunk
                #    —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, –≤–ª–µ–∑–∞–µ—Ç –ª–∏ –≤—Å—ë —Ü–µ–ª–∏–∫–æ–º.
                test_lines = [brand_header, ""] + mg_block_lines  # –±—Ä–µ–Ω–¥, –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –±–ª–æ–∫ –≥—Ä—É–ø–ø—ã

                if fits_block_in_chunk(test_lines, current_chunk) :
                    # –í—Å—ë –≤–ª–µ–∑–∞–µ—Ç
                    # –î–æ–±–∞–≤–∏–º —Ä–µ–∞–ª—å–Ω–æ
                    for line in test_lines :
                        add_line(line)
                    last_brand = brand
                else :
                    # –ù–µ –≤–ª–µ–∑–∞–µ—Ç –≤ —Ç–µ–∫—É—â–∏–π chunk
                    # => ¬´–æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º¬ª –±—Ä–µ–Ω–¥ (–Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –∂–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏) –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π chunk
                    finalize_chunk()

                    # –ü—Ä–æ–±—É–µ–º –≤ –ø—É—Å—Ç–æ–º chunk
                    if fits_block_in_empty_chunk(test_lines) :
                        # –ü–æ–º–µ—Å—Ç–∏—Ç—Å—è
                        for line in test_lines :
                            add_line(line)
                        last_brand = brand
                    else :
                        # –î–∞–∂–µ –≤ –ø—É—Å—Ç–æ–π chunk —Ü–µ–ª–∏–∫–æ–º –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è => –Ω—É–∂–Ω–æ –¥—Ä–æ–±–∏—Ç—å
                        # –ù–æ –¥—Ä–æ–±–∏—Ç—å –º—ã –±—É–¥–µ–º –≤—Å—ë –≤–º–µ—Å—Ç–µ: brand_header + "" + mg_block_lines
                        # –ï—Å–ª–∏ brand_header + "" + mg_block_lines —Ç–æ–∂–µ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è,
                        # –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–¥—ë—Ç—Å—è –¥–µ–ª–∏—Ç—å. –û–¥–Ω–∞–∫–æ –±—Ä–µ–Ω–¥ ‚Äî —Ç–æ–∂–µ —á–∞—Å—Ç—å ¬´—à–∞–ø–∫–∏¬ª –¥–ª—è –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã.
                        # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–æ–π–¥—ë–º —á–µ—Ä–µ–∑ —Ç—É –∂–µ –ª–æ–≥–∏–∫—É add_block_in_parts:
                        big_block = [brand_header, ""] + mg_block_lines
                        add_block_in_parts(big_block)
                        last_brand = brand
            else :
                # –ë—Ä–µ–Ω–¥ —É–∂–µ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω –≤ —Ç–µ–∫—É—â–µ–º chunk, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥–Ω—É—é –≥—Ä—É–ø–ø—É
                # (—Ü–µ–ª–∏–∫–æ–º –∏–ª–∏ —Å –¥—Ä–æ–±–ª–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –Ω–µ –≤–ª–µ–∑–∞–µ—Ç)
                add_block_with_split(mg_block_lines)

        # –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –±—Ä–µ–Ω–¥–∞ –º–æ–∂–Ω–æ (–ø–æ –∂–µ–ª–∞–Ω–∏—é) –¥–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –Ω–µ—Ç.
        # –ù–æ –≥–ª–∞–≤–Ω–æ–µ ‚Äî –µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –±—Ä–µ–Ω–¥ –ø–æ–π–¥—ë—Ç, –æ–Ω —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç —Å–≤–æ–∏ —É—Å–ª–æ–≤–∏—è.

    # –í —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ ‚Äî —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π chunk, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å
    finalize_chunk()

    return messages

# ------------------------------ –ì–õ–ê–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò BEST------------------------------
# –ù–æ–≤—ã–µ callback-–ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
STRUCTURE_GROUPED = "structure_grouped"
STRUCTURE_FLAT = "structure_flat"

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è /best –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–≥–æ –∫–∞–∫)
ASK_STRUCTURE = 6   # –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
ASK_COMMENTS  = 7   # —Å–¥–≤–∏–≥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏

def build_final_product_list_for_multiple_brands(
        user_data: dict,
        brand_list: List[str]
) -> Dict[str, Dict[str, List[Dict[str, Any]]]] :
    """
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –±—Ä–µ–Ω–¥–æ–≤ —Ä–∞–∑–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´Apple iPhone¬ª –∏ ¬´Apple Watch¬ª),
    —Ç–æ –Ω—É–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ build_final_product_list_for_brand
    –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –≤ brand_list.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å final_product_list,
    —Å–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö ¬´–ø–æ–¥-–±—Ä–µ–Ω–¥–æ–≤¬ª.
    """

    if not brand_list :
        return {}

    combined_result: Dict[str, Dict[str, List[Dict[str, Any]]]] = {}

    for single_brand in brand_list :
        # –≤—ã–∑—ã–≤–∞–µ–º –≤–∞—à—É —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        sub_result = build_final_product_list_for_brand(user_data, single_brand)

        # —Ç–µ–ø–µ—Ä—å —Å–ª–∏–≤–∞–µ–º sub_result –≤ –æ–±—â–∏–π combined_result
        for model_group, product_dict in sub_result.items() :
            if model_group not in combined_result :
                combined_result[model_group] = {}
            for product_name, entries in product_dict.items() :
                if product_name not in combined_result[model_group] :
                    combined_result[model_group][product_name] = []
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
                combined_result[model_group][product_name].extend(entries)

    return combined_result

def build_final_product_list_for_all(user_data: dict) -> Dict[str, Dict[str, List[Dict[str, Any]]]] :
    """
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª ¬´–í—Å–µ –≥—Ä—É–ø–ø—ã¬ª, –±–µ—Ä–µ–º –≤–æ–æ–±—â–µ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    (–∞–Ω–∞–ª–æ–≥ brand="ALL").
    """
    return build_final_product_list(user_data)

async def best_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # 3) /best: –®–∞–≥ 1 ‚Äî –í—ã–±–æ—Ä ¬´–í—Å–µ –≥—Ä—É–ø–ø—ã¬ª –∏–ª–∏ –æ–¥–Ω–∞ –∏–∑ LIST_BRAND_GROUP
    """
    –®–∞–≥ 1: –ø–æ–∫–∞–∑–∞—Ç—å "–í—Å–µ –≥—Ä—É–ø–ø—ã" + –≥—Ä—É–ø–ø—ã –∏–∑ LIST_BRAND_GROUP.
    –ü—Ä–∏–º–µ—Ä:
     - "–í—Å–µ –≥—Ä—É–ø–ø—ã"
     - "Apple"
     - "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ Android"
     - "Dyson"
    """
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–≤–∞—Ä—ã
    user_products = get_all_products(user_id)
    if not user_products :
        await update.message.reply_text("–í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã...")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ –≥—Ä—É–ø–ø—ã"
    keyboard = []
    keyboard.append([InlineKeyboardButton("–í—Å–µ –≥—Ä—É–ø–ø—ã", callback_data="group_ALL")])

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–ª—é—á–∞ –≤ LIST_BRAND_GROUP
    for group_name in LIST_BRAND_GROUP.keys() :
        callback_data = f"group_{group_name}"
        keyboard.append([InlineKeyboardButton(group_name, callback_data=callback_data)])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=reply_markup)

async def best_group_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) :
    # 4) best_group_callback: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ ¬´group_ALL¬ª –∏–ª–∏ ¬´group_Apple¬ª
    """
    –ï—Å–ª–∏ group_ALL => –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞ (CSV/Excel/–°–æ–æ–±—â–µ–Ω–∏–µ).
    –ò–Ω–∞—á–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏¬ª + —Å–ø–∏—Å–æ–∫ sub-–±—Ä–µ–Ω–¥–æ–≤.
    """
    query = update.callback_query
    data = query.data  # "group_ALL" –∏–ª–∏ "group_Apple", "group_–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ Android", "group_Dyson", ...
    await query.answer()

    if data == "group_ALL" :
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_data, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ "ALL" (–≤—Å–µ –±—Ä–µ–Ω–¥—ã)
        context.user_data["selected_group"] = "ALL"
        # –†–∞–∑ —Å—Ä–∞–∑—É "–í—Å–µ –≥—Ä—É–ø–ø—ã", –∏–¥—ë–º –ø—Ä—è–º–æ –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞
        keyboard = [
            [
                InlineKeyboardButton("CSV", callback_data="best_csv"),
                InlineKeyboardButton("Excel", callback_data="best_excel"),
                InlineKeyboardButton("–°–æ–æ–±—â–µ–Ω–∏–µ", callback_data="best_msg"),
            ]
        ]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    # –ò–Ω–∞—á–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Apple")
    group_name = data.replace("group_", "")
    context.user_data["selected_group"] = group_name

    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é ¬´–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏¬ª + —Å–ø–∏—Å–æ–∫ sub-–±—Ä–µ–Ω–¥–æ–≤
    sub_brands = LIST_BRAND_GROUP.get(group_name, [])

    keyboard = []
    # "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    keyboard.append([InlineKeyboardButton("–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="cat_ALL")])
    # –∫–∞–∂–¥–∞—è sub-–±—Ä–µ–Ω–¥
    for sb in sub_brands :
        cb = f"cat_{sb}"
        keyboard.append([InlineKeyboardButton(sb, callback_data=cb)])

    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))

async def best_category_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) :
    # 5) best_category_callback: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ¬´cat_ALL¬ª –∏–ª–∏ ¬´cat_Apple iPhone¬ª
    """
    –ï—Å–ª–∏ cat_ALL => –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ –ø–æ–¥-–±—Ä–µ–Ω–¥—ã –≥—Ä—É–ø–ø—ã.
    –ï—Å–ª–∏ cat_XXX => –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–¥-–±—Ä–µ–Ω–¥.
    –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É "–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç".
    """
    query = update.callback_query
    data = query.data  # "cat_ALL" –∏–ª–∏ "cat_Apple iPhone", ...
    await query.answer()

    group_name = context.user_data.get("selected_group", "ALL")

    if data == "cat_ALL" :
        # –¢–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ—Ä–µ—Ç –≤—Å–µ sub-–±—Ä–µ–Ω–¥—ã —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        sub_brands = LIST_BRAND_GROUP.get(group_name, [])
        context.user_data["selected_brands"] = sub_brands
    else :
        # –í—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä "cat_Apple iPhone"
        brand_str = data.replace("cat_", "")
        context.user_data["selected_brands"] = [brand_str]

    # –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç (CSV / Excel / –°–æ–æ–±—â–µ–Ω–∏–µ)
    keyboard = [
        [
            InlineKeyboardButton("CSV", callback_data="best_csv"),
            InlineKeyboardButton("Excel", callback_data="best_excel"),
            InlineKeyboardButton("–°–æ–æ–±—â–µ–Ω–∏–µ", callback_data="best_msg"),
        ]
    ]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=InlineKeyboardMarkup(keyboard))

async def best_command_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) :
    query = update.callback_query
    choice = query.data  # "best_csv", "best_excel" –∏–ª–∏ "best_msg"
    await query.answer()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQL –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
    user_id = update.effective_user.id
    pseudo_data = load_pseudo_user_data(user_id)
    group_name = context.user_data.get("selected_group", "ALL")
    selected_sub_brands = context.user_data.get("selected_brands", [])
    if group_name == "ALL" :
        final_product_list = build_final_product_list_for_all(pseudo_data)
    else :
        final_product_list = build_final_product_list_for_multiple_brands(pseudo_data, selected_sub_brands)

    if not final_product_list :
        await query.edit_message_text("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–ø—É—Å—Ç–æ?).")
        return

    context.user_data["best_final_product_list"] = final_product_list
    context.user_data["best_chosen_format"] = choice

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç CSV –∏–ª–∏ Excel, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    if choice in ["best_csv", "best_excel"] :
        keyboard = [
            [
                InlineKeyboardButton("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", callback_data=STRUCTURE_GROUPED),
                InlineKeyboardButton("–ü–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç", callback_data=STRUCTURE_FLAT),
            ]
        ]
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ASK_STRUCTURE  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç "–°–æ–æ–±—â–µ–Ω–∏–µ" ‚Äì –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É "–£—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏?"
    else :
        keyboard = [
            [
                InlineKeyboardButton("–î–∞", callback_data="best_msg_comments_yes"),
                InlineKeyboardButton("–ù–µ—Ç", callback_data="best_msg_comments_no"),
            ]
        ]
        await query.edit_message_text(
            text="–ù—É–∂–Ω–æ –ª–∏ —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ASK_COMMENTS

async def best_structure_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    structure_choice = query.data  # "structure_grouped" –∏–ª–∏ "structure_flat"
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if structure_choice == STRUCTURE_GROUPED:
        context.user_data["best_structure"] = "grouped"
    else:
        context.user_data["best_structure"] = "flat"

    # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ–º: "–ù—É–∂–Ω–æ –ª–∏ —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏?"
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data="best_msg_comments_yes"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="best_msg_comments_no"),
        ]
    ]
    await query.edit_message_text(
        text="–ù—É–∂–Ω–æ –ª–∏ —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ASK_COMMENTS

async def best_command_comments_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    choice = query.data  # "best_msg_comments_yes" –∏–ª–∏ "best_msg_comments_no"
    await query.answer()

    include_comments = (choice == "best_msg_comments_yes")

    chosen_format = context.user_data.get("best_chosen_format", "best_msg")
    final_product_list = context.user_data.get("best_final_product_list", {})

    if not final_product_list:
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (–ø—É—Å—Ç–æ?).")
        return

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    await query.edit_message_reply_markup(reply_markup=None)

    if chosen_format == "best_csv":
        if not include_comments:
            remove_commented_products(final_product_list)
        await query.message.reply_text("üìë –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV...")
        if context.user_data.get("best_structure", "grouped") == "flat":
            await send_csv_flat(query.message, context, final_product_list, file_prefix="best_")
        else:
            await send_csv(query.message, context, final_product_list, file_prefix="best_")
    elif chosen_format == "best_excel":
        if not include_comments:
            remove_commented_products(final_product_list)
        await query.message.reply_text("üìë –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel...")
        if context.user_data.get("best_structure", "grouped") == "flat":
            await send_excel_flat(query.message, context, final_product_list, file_prefix="best_")
        else:
            await send_excel(query.message, context, final_product_list, file_prefix="best_")
    elif chosen_format == "best_msg":
        messages = generate_text_messages(final_product_list, PRODUCT_LIBRARY, include_comments=include_comments)
        for msg in messages:
            await query.message.reply_text(msg, parse_mode="HTML")
    else:
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")

# ------------------------------ –ü–ï–†–ï–ú–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø markup –ò –¢–û–ß–ö–ê –í–•–û–î–ê------------------------------

# STATES (ConversationHandler)
# –ù–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ —Ä–∞–º–∫–∞—Ö /markup
MARKUP_STRUCTURE_GROUPED = "markup_structure_grouped"
MARKUP_STRUCTURE_FLAT = "markup_structure_flat"

markup_TYPE = 1      # –í—ã–±–æ—Ä "—Ñ–∏–∫—Å/–ø—Ä–æ—Ü–µ–Ω—Ç"
ENTER_VALUE = 2      # –í–≤–æ–¥ —á–∏—Å–ª–∞
CHOOSE_GROUP = 3     # –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã (Apple / Dyson / "–í—Å–µ –≥—Ä—É–ø–ø—ã")
CHOOSE_CATEGORY = 4  # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã)
CHOOSE_FORMAT = 5    # –í—ã–±–æ—Ä CSV/Excel/–°–æ–æ–±—â–µ–Ω–∏–µ
ASK_COMMENT = 6     # –î–∞/–ù–µ—Ç –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º
# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
ASK_MARKUP_STRUCTURE = 7
# –°–¥–≤–∏–≥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö:
ASK_MARKUP_COMMENT = 8

# CALLBACK PATTERNS –¥–ª—è —Ç–∏–ø–æ–≤ –Ω–∞—Ü–µ–Ω–∫–∏
markup_FIXED = "markup_fixed"
markup_PERCENT = "markup_percent"

FORMAT_CSV = "markup_csv"
FORMAT_EXCEL = "markup_excel"
FORMAT_MSG = "markup_msg"

MSG_COMMENTS_YES = "markup_msg_comments_yes"
MSG_COMMENTS_NO  = "markup_msg_comments_no"

# –õ–∏–º–∏—Ç—ã
MAX_markup_VALUE = 1_000_000  # —Ä—É–±–ª–µ–π
MAX_markup_PERCENT = 1_000    # 1000%

# –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è —ç—Ç–∞–ø–∞ –≤–≤–æ–¥–∞ –Ω–∞—Ü–µ–Ω–∫–∏
ERROR_MESSAGES_MARKUP_FORMAT = [
    "üîÑ –û–π! –ü–æ—Ö–æ–∂–µ, —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–µ–º–Ω–æ–≥–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–º–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòä",
    "üìù –ö–∞–∂–µ—Ç—Å—è, –≤ –≤–∞—à–µ–º –≤–≤–æ–¥–µ –µ—Å—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–ª–µ–¥—É–µ—Ç–µ –ø—Ä–∏–º–µ—Ä—É, –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É. üöÄ",
    "‚ùó –í–Ω–∏–º–∞–Ω–∏–µ! –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥—Ä–∞–¥–∞—Ü–∏—é —Ü–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—Ä–∞–∑—Ü—É. üí°",
    "ü§î –•–º, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. üìã",
    "üî¢ –ü–æ—Ö–æ–∂–µ, —á–∏—Å–ª–∞ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. üßÆ",
    "üõ† –£–ø—Å! –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–≤–æ–¥–∞. –î–∞–≤–∞–π—Ç–µ —Å–≤–µ—Ä–∏–º—Å—è —Å –ø—Ä–∏–º–µ—Ä–æ–º –∏ –ø–æ–≤—Ç–æ—Ä–∏–º –ø–æ–ø—ã—Ç–∫—É. üìù",
    "üìä –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ñ–æ—Ä–º–∞—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞. üòä",
    "üôà –Ø –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –≤–≤–æ–¥. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–ª–µ–¥—É–µ—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–∏–º–µ—Ä–∞, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üîÑ",
    "üöß –û—à–∏–±–∫–∞! –§–æ—Ä–º–∞—Ç –≥—Ä–∞–¥–∞—Ü–∏–∏ —Ü–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –µ—â—ë —Ä–∞–∑ –ø–æ –ø—Ä–∏–º–µ—Ä—É –∏ –ø–æ–≤—Ç–æ—Ä–∏–º. üí™",
    "üîç –ù–µ —É–¥–∞—ë—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üìñ"
]

# ------------------------------ –í–•–û–î–ù–ê–Ø –¢–û–ß–ö–ê: /markup ------------------------------

async def markup_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω–∞—Ä–∏—è /markup.
    –®–∞–≥ 1: –≤—ã–±–æ—Ä "–¢–≤–µ—Ä–¥–∞—è –Ω–∞—Ü–µ–Ω–∫–∞" / "–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞".
    –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ markup_TYPE.
    """
    user_id = update.effective_user.id
    user_products = get_all_products(user_id)
    if not user_products :
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ ‚Äî –Ω–µ—á–µ–≥–æ –Ω–∞—Ü–µ–Ω–∏–≤–∞—Ç—å! –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã.")
        return ConversationHandler.END

    keyboard = [
        [InlineKeyboardButton("–¢–≤–µ—Ä–¥–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ (—Ä—É–±.)", callback_data=markup_FIXED)],
        [InlineKeyboardButton("–ù–∞—Ü–µ–Ω–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (%)", callback_data=markup_PERCENT)],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –Ω–∞—Ü–µ–Ω–∫–∏:",
        reply_markup=reply_markup
    )
    return markup_TYPE

# ------------------------------ –ì–õ–ê–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò markup------------------------------

async def markup_type_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–¢–≤–µ—Ä–¥–∞—è –Ω–∞—Ü–µ–Ω–∫–∞" / "–ù–∞—Ü–µ–Ω–∫–∞ %".
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_data["markup_type"], –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ.
    """
    query = update.callback_query
    data = query.data  # markup_FIXED / markup_PERCENT
    await query.answer()

    if data == markup_FIXED:
        context.user_data["markup_type"] = "fixed"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞—Ü–µ–Ω–∫–∏ (—Ä—É–±.):")
    elif data == markup_PERCENT:
        context.user_data["markup_type"] = "percent"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –∏–ª–∏ 10%).\n–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ –±–ª–∏–∂–∞–π—à–∏—Ö 100 —Ä—É–±–ª–µ–π.")
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞—Ü–µ–Ω–∫–∏.")
        return ConversationHandler.END

    return ENTER_VALUE

async def markup_value_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —á–∏—Å–ª–æ (–∏–ª–∏ —á–∏—Å–ª–æ —Å %).
    –ü–∞—Ä—Å–∏–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã, –µ—Å–ª–∏ –æ–∫ => –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É "–≥—Ä—É–ø–ø—ã" (CHOOSE_GROUP).
    –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ –∏–∑ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ.
    """
    user_input = update.message.text.strip().lower()
    markup_type = context.user_data.get("markup_type", "fixed")

    # –ò—â–µ–º —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ
    just_digits = re.findall(r"\d+(?:[.,]\d+)?", user_input)
    if not just_digits:
        return await _markup_retry_or_abort(update, context)

    raw_number = just_digits[0].replace(",", ".")
    try:
        value = float(raw_number)
    except ValueError:
        return await _markup_retry_or_abort(update, context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    if markup_type == "fixed":
        if value > MAX_markup_VALUE:
            return await _markup_retry_or_abort(update, context)
        context.user_data["markup_value"] = value
        await update.message.reply_text(
            f"–ü—Ä–∏–Ω—è—Ç–∞ —Ç–≤—ë—Ä–¥–∞—è –Ω–∞—Ü–µ–Ω–∫–∞: {value:.0f} —Ä—É–±.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:"
        )
    else:  # "percent"
        if value > MAX_markup_PERCENT:
            return await _markup_retry_or_abort(update, context)
        context.user_data["markup_value"] = value
        await update.message.reply_text(
            f"–ü—Ä–∏–Ω—è—Ç–∞ –Ω–∞—Ü–µ–Ω–∫–∞: {value:.1f}%\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:"
        )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é CHOOSE_GROUP: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–í—Å–µ –≥—Ä—É–ø–ø—ã" –∏ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø (LIST_BRAND_GROUP)
    keyboard = []
    keyboard.append([InlineKeyboardButton("–í—Å–µ –≥—Ä—É–ø–ø—ã", callback_data="group_ALL")])
    for group_name in LIST_BRAND_GROUP.keys():
        callback_data = f"group_{group_name}"
        keyboard.append([InlineKeyboardButton(group_name, callback_data=callback_data)])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=reply_markup)
    return CHOOSE_GROUP

async def _markup_retry_or_abort(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∞ –Ω–∞ —ç—Ç–∞–ø–µ markup.
    –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –∏ –ª–∏–±–æ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞, –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ—Å–ª–µ 3 –æ—à–∏–±–æ–∫.
    """
    attempts = context.user_data.get("markup_attempts", 0) + 1
    context.user_data["markup_attempts"] = attempts
    error_msg = random.choice(ERROR_MESSAGES_MARKUP_FORMAT)
    if attempts >= 3:
        await update.message.reply_text(f"{error_msg}\n–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫. –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω.")
        return ConversationHandler.END
    else:
        await update.message.reply_text(error_msg)
        return ENTER_VALUE

async def markup_group_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ê–Ω–∞–ª–æ–≥ best_group_callback:
      - –ï—Å–ª–∏ group_ALL => –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞
      - –ï—Å–ª–∏ group_Apple => –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" + sub-brand'—ã
    """
    query = update.callback_query
    data = query.data  # "group_ALL" / "group_Apple" / ...
    await query.answer()

    if data == "group_ALL":
        # user –≤—ã–±—Ä–∞–ª "–í—Å–µ –≥—Ä—É–ø–ø—ã"
        context.user_data["selected_group"] = "ALL"

        # –°—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞
        keyboard = [
            [
                InlineKeyboardButton("CSV", callback_data=FORMAT_CSV),
                InlineKeyboardButton("Excel", callback_data=FORMAT_EXCEL),
                InlineKeyboardButton("–°–æ–æ–±—â–µ–Ω–∏–µ", callback_data=FORMAT_MSG),
            ]
        ]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=InlineKeyboardMarkup(keyboard))
        return CHOOSE_FORMAT

    # –ò–Ω–∞—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≥—Ä—É–ø–ø—É
    group_name = data.replace("group_", "")
    context.user_data["selected_group"] = group_name

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" + —Å–ø–∏—Å–æ–∫ sub-–±—Ä–µ–Ω–¥–æ–≤
    sub_brands = LIST_BRAND_GROUP.get(group_name, [])

    keyboard = []
    keyboard.append([InlineKeyboardButton("–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="cat_ALL")])
    for sb in sub_brands:
        cb = f"cat_{sb}"
        keyboard.append([InlineKeyboardButton(sb, callback_data=cb)])

    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSE_CATEGORY

async def markup_category_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ê–Ω–∞–ª–æ–≥ best_category_callback:
      - –ï—Å–ª–∏ cat_ALL => user –≤—ã–±—Ä–∞–ª –≤—Å–µ –ø–æ–¥-–±—Ä–µ–Ω–¥—ã
      - –ò–Ω–∞—á–µ => –æ–¥–∏–Ω –ø–æ–¥-–±—Ä–µ–Ω–¥
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞ (CSV/Excel/–°–æ–æ–±—â–µ–Ω–∏–µ).
    """
    query = update.callback_query
    data = query.data
    await query.answer()

    group_name = context.user_data.get("selected_group", "ALL")

    if data == "cat_ALL":
        # –≤—Å–µ sub-–±—Ä–µ–Ω–¥—ã
        sub_brands = LIST_BRAND_GROUP.get(group_name, [])
        context.user_data["selected_brands"] = sub_brands
    else:
        # –Ω–∞–ø—Ä–∏–º–µ—Ä "cat_Apple iPhone" => "Apple iPhone"
        brand_str = data.replace("cat_", "")
        context.user_data["selected_brands"] = [brand_str]

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞
    keyboard = [
        [
            InlineKeyboardButton("CSV", callback_data=FORMAT_CSV),
            InlineKeyboardButton("Excel", callback_data=FORMAT_EXCEL),
            InlineKeyboardButton("–°–æ–æ–±—â–µ–Ω–∏–µ", callback_data=FORMAT_MSG),
        ]
    ]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSE_FORMAT

async def markup_format_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è CSV/Excel/–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞—Ü–µ–Ω–∫–µ.
    –¢–µ–ø–µ—Ä—å: –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω CSV –∏–ª–∏ Excel, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã.
    """
    query = update.callback_query
    choice = query.data  # FORMAT_CSV, FORMAT_EXCEL –∏–ª–∏ FORMAT_MSG
    await query.answer()

    context.user_data["markup_chosen_format"] = choice

    if choice in [FORMAT_CSV, FORMAT_EXCEL]:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        user_id = update.effective_user.id
        pseudo_data = load_pseudo_user_data(user_id)
        group_name = context.user_data.get("selected_group", "ALL")
        selected_sub_brands = context.user_data.get("selected_brands", [])
        if group_name == "ALL":
            final_product_list = build_final_product_list_for_all(pseudo_data)
        else:
            final_product_list = build_final_product_list_for_multiple_brands(pseudo_data, selected_sub_brands)
        context.user_data["markup_final_product_list"] = final_product_list

        # –°–ø—Ä–æ—Å–∏–º, –≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –≤—ã–≤–æ–¥–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
        keyboard = [
            [
                InlineKeyboardButton("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", callback_data=MARKUP_STRUCTURE_GROUPED),
                InlineKeyboardButton("–ü–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç", callback_data=MARKUP_STRUCTURE_FLAT),
            ]
        ]
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ASK_MARKUP_STRUCTURE
    else:
        # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ "–°–æ–æ–±—â–µ–Ω–∏–µ" —Å—Ä–∞–∑—É —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        keyboard = [
            [
                InlineKeyboardButton("–î–∞", callback_data=MSG_COMMENTS_YES),
                InlineKeyboardButton("–ù–µ—Ç", callback_data=MSG_COMMENTS_NO),
            ]
        ]
        await query.edit_message_text(
            text="–£—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ASK_MARKUP_COMMENT

async def markup_structure_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è /markup.
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ–± —É—á—ë—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
    """
    query = update.callback_query
    structure_choice = query.data  # MARKUP_STRUCTURE_GROUPED –∏–ª–∏ MARKUP_STRUCTURE_FLAT
    await query.answer()

    if structure_choice == MARKUP_STRUCTURE_GROUPED:
        context.user_data["markup_structure"] = "grouped"
    else:
        context.user_data["markup_structure"] = "flat"

    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data=MSG_COMMENTS_YES),
            InlineKeyboardButton("–ù–µ—Ç", callback_data=MSG_COMMENTS_NO),
        ]
    ]
    await query.edit_message_text(
        text="–£—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ASK_MARKUP_COMMENT

async def markup_comments_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± —É—á—ë—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è /markup.
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é.
    """
    query = update.callback_query
    choice = query.data  # MSG_COMMENTS_YES –∏–ª–∏ MSG_COMMENTS_NO
    await query.answer()

    include_comments = (choice == MSG_COMMENTS_YES)
    chosen_format = context.user_data.get("markup_chosen_format")

    if chosen_format == FORMAT_CSV:
        if context.user_data.get("markup_structure", "grouped") == "flat":
            await query.edit_message_text("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV —Å –Ω–∞—Ü–µ–Ω–∫–æ–π (–ü–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)...")
            await send_csv_flat_with_markup(query, context, include_comments=include_comments)
        else:
            await query.edit_message_text("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV —Å –Ω–∞—Ü–µ–Ω–∫–æ–π...")
            await send_csv_with_markup(query, context, include_comments=include_comments)
        return ConversationHandler.END
    elif chosen_format == FORMAT_EXCEL:
        if context.user_data.get("markup_structure", "grouped") == "flat":
            await query.edit_message_text("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Å –Ω–∞—Ü–µ–Ω–∫–æ–π (–ü–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)...")
            await send_excel_flat_with_markup(query, context, include_comments=include_comments)
        else:
            await query.edit_message_text("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Å –Ω–∞—Ü–µ–Ω–∫–æ–π...")
            await send_excel_with_markup(query, context, include_comments=include_comments)
        return ConversationHandler.END
    elif chosen_format == FORMAT_MSG:
        await query.edit_message_text("–§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π...")
        await send_message_with_markup(query, context, include_comments=include_comments)
        return ConversationHandler.END
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
        return ConversationHandler.END

# ------------------------------ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø markup------------------------------

async def send_csv_with_markup(query, context, include_comments=False) :
    user_id = query.message.chat_id
    group_name = context.user_data.get("selected_group", "ALL")
    sub_brands = context.user_data.get("selected_brands", [])
    markup_type = context.user_data.get("markup_type", "fixed")
    markup_value = context.user_data.get("markup_value", 0)
    pseudo_data = load_pseudo_user_data(user_id)

    if group_name == "ALL" :
        final_product_list = build_final_product_list_for_all(pseudo_data)
    else :
        final_product_list = build_final_product_list_for_multiple_brands(pseudo_data, sub_brands)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Ü–µ–Ω–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
    apply_markup_to_final_list(final_product_list, markup_type, markup_value)

    if not include_comments :
        remove_commented_products(final_product_list)

    # –ü–µ—Ä–µ–¥–∞—ë–º –ø—Ä–µ—Ñ–∏–∫—Å "markup_csv_" –≤–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ
    await send_csv(query.message, context, final_product_list, file_prefix="markup_")

async def send_csv_flat_with_markup(query, context, include_comments=False):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSV-—Ñ–∞–π–ª –¥–ª—è /markup –≤ –ø–ª–æ—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π.
    """
    user_id = query.message.chat_id
    group_name = context.user_data.get("selected_group", "ALL")
    sub_brands = context.user_data.get("selected_brands", [])
    markup_type = context.user_data.get("markup_type", "fixed")
    markup_value = context.user_data.get("markup_value", 0)

    pseudo_data = load_pseudo_user_data(user_id)
    if group_name == "ALL":
        final_product_list = build_final_product_list_for_all(pseudo_data)
    else:
        final_product_list = build_final_product_list_for_multiple_brands(pseudo_data, sub_brands)

    apply_markup_to_final_list(final_product_list, markup_type, markup_value)
    if not include_comments:
        remove_commented_products(final_product_list)

    await send_csv_flat(query.message, context, final_product_list, file_prefix="markup_")

async def send_excel_with_markup(query, context, include_comments=False):
    user_id = query.message.chat_id
    group_name = context.user_data.get("selected_group", "ALL")
    sub_brands = context.user_data.get("selected_brands", [])

    markup_type = context.user_data.get("markup_type", "fixed")
    markup_value = context.user_data.get("markup_value", 0)

    pseudo_data = load_pseudo_user_data(user_id)
    if group_name == "ALL":
        final_product_list = build_final_product_list_for_all(pseudo_data)
    else:
        final_product_list = build_final_product_list_for_multiple_brands(pseudo_data, sub_brands)

    apply_markup_to_final_list(final_product_list, markup_type, markup_value)

    if not include_comments:
        remove_commented_products(final_product_list)

    # –ü–µ—Ä–µ–¥–∞—ë–º –ø—Ä–µ—Ñ–∏–∫—Å "markup_excel_" –≤–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ
    await send_excel(query.message, context, final_product_list, file_prefix="markup_")

async def send_excel_flat_with_markup(query, context, include_comments=False):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Excel-—Ñ–∞–π–ª –¥–ª—è /markup –≤ –ø–ª–æ—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π.
    """
    user_id = query.message.chat_id
    group_name = context.user_data.get("selected_group", "ALL")
    sub_brands = context.user_data.get("selected_brands", [])
    markup_type = context.user_data.get("markup_type", "fixed")
    markup_value = context.user_data.get("markup_value", 0)

    pseudo_data = load_pseudo_user_data(user_id)
    if group_name == "ALL":
        final_product_list = build_final_product_list_for_all(pseudo_data)
    else:
        final_product_list = build_final_product_list_for_multiple_brands(pseudo_data, sub_brands)

    apply_markup_to_final_list(final_product_list, markup_type, markup_value)
    if not include_comments:
        remove_commented_products(final_product_list)

    await send_excel_flat(query.message, context, final_product_list, file_prefix="markup_")

async def send_message_with_markup(query, context, include_comments=False):
    user_id = query.message.chat_id
    group_name = context.user_data.get("selected_group", "ALL")
    sub_brands = context.user_data.get("selected_brands", [])

    markup_type = context.user_data.get("markup_type", "fixed")
    markup_value = context.user_data.get("markup_value", 0)

    pseudo_data = load_pseudo_user_data(user_id)
    if group_name == "ALL" :
        final_product_list = build_final_product_list_for_all(pseudo_data)
    else :
        final_product_list = build_final_product_list_for_multiple_brands(pseudo_data, sub_brands)

    apply_markup_to_final_list(final_product_list, markup_type, markup_value)

    messages = generate_text_messages(
        final_product_list,
        PRODUCT_LIBRARY,
        include_comments=include_comments
    )
    for msg in messages :
        await query.message.reply_text(msg, parse_mode="HTML")

def round_up_to_nearest_100(amount) :
    """
    –û–∫—Ä—É–≥–ª—è–µ—Ç —Å—É–º–º—É –¥–æ –±–ª–∏–∂–∞–π—à–∏—Ö 100 —Ä—É–±–ª–µ–π –≤–≤–µ—Ä—Ö –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–∞—Ü–µ–Ω–∫–∏ –≤ %.

    –ü—Ä–∏–º–µ—Ä—ã:
    1234 -> 1300
    1200 -> 1200
    """
    return math.ceil(amount / 100.0) * 100

def apply_markup_to_final_list(final_product_list, markup_type, markup_value) :
    """
    –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º –∏ –∫ price –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç –Ω–∞—Ü–µ–Ω–∫—É.
    –ü—Ä–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–µ –æ–∫—Ä—É–≥–ª—è–µ—Ç —Ü–µ–Ω—É –¥–æ –±–ª–∏–∂–∞–π—à–∏—Ö 100 —Ä—É–±–ª–µ–π –≤–≤–µ—Ä—Ö.

    markup_type: "fixed" –∏–ª–∏ "percent"
    markup_value: float
    """
    if not final_product_list :
        return

    for model_group, product_dict in final_product_list.items() :
        for product_name, entries in product_dict.items() :
            for entry in entries :
                orig_price = entry["price"]
                if markup_type == "fixed" :
                    new_price = orig_price + markup_value
                else :
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é –Ω–∞—Ü–µ–Ω–∫—É
                    new_price = orig_price + (orig_price * (markup_value / 100.0))
                    # –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö –¥–æ –±–ª–∏–∂–∞–π—à–∏—Ö 100 —Ä—É–±–ª–µ–π
                    new_price = round_up_to_nearest_100(new_price)

                # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ —Ä—É–±–ª–µ–π
                entry["price"] = int(new_price)

def get_markup_conversation_handler():
    return ConversationHandler(
        entry_points=[CommandHandler("markup", markup_command)],
        states={
            markup_TYPE: [
                CallbackQueryHandler(markup_type_callback, pattern=f"^{markup_FIXED}|{markup_PERCENT}$")
            ],
            ENTER_VALUE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, markup_value_handler)
            ],
            CHOOSE_GROUP: [
                CallbackQueryHandler(markup_group_callback, pattern=r"^group_")
            ],
            CHOOSE_CATEGORY: [
                CallbackQueryHandler(markup_category_callback, pattern=r"^cat_")
            ],
            CHOOSE_FORMAT: [
                CallbackQueryHandler(markup_format_callback, pattern=f"^{FORMAT_CSV}|{FORMAT_EXCEL}|{FORMAT_MSG}$")
            ],
            ASK_MARKUP_STRUCTURE: [
                CallbackQueryHandler(markup_structure_callback, pattern=f"^{MARKUP_STRUCTURE_GROUPED}|{MARKUP_STRUCTURE_FLAT}$")
            ],
            ASK_MARKUP_COMMENT: [
                CallbackQueryHandler(markup_comments_callback, pattern=f"^{MSG_COMMENTS_YES}|{MSG_COMMENTS_NO}$")
            ],
        },
        fallbacks=[
            CommandHandler("cancel", lambda u, c: ConversationHandler.END),
        ]
    )


# ------------------------------ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ STATES –¥–ª—è gradmark ------------------------------

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≥—Ä–∞–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–∏
gradmark_TYPE = 1            # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≥—Ä–∞–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–∏ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è)
ENTER_GRADATION = 2          # –í–≤–æ–¥ –≥—Ä–∞–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
ASK_GRADMARK_STRUCTURE = 6   # –ù–æ–≤—ã–π —à–∞–≥: –≤—ã–±–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã

# Callback-–ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≥—Ä–∞–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–∏
gradmark_FIXED = "gradmark_fixed"
gradmark_PERCENT = "gradmark_percent"

# –ù–æ–≤—ã–µ callback-–ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –≥—Ä–∞–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–µ
GRADMARK_STRUCTURE_GROUPED = "gradmark_structure_grouped"
GRADMARK_STRUCTURE_FLAT = "gradmark_structure_flat"

# –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è —ç—Ç–∞–ø–∞ –≥—Ä–∞–¥–∞—Ü–∏–∏ —Ü–µ–Ω
ERROR_MESSAGES_GRADMARK_FORMAT = [
    "üîÑ –û–π! –ü–æ—Ö–æ–∂–µ, —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–µ–º–Ω–æ–≥–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–º–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòä",
    "üìù –ö–∞–∂–µ—Ç—Å—è, –≤ –≤–∞—à–µ–º –≤–≤–æ–¥–µ –µ—Å—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–ª–µ–¥—É–µ—Ç–µ –ø—Ä–∏–º–µ—Ä—É, –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É. üöÄ",
    "‚ùó –í–Ω–∏–º–∞–Ω–∏–µ! –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥—Ä–∞–¥–∞—Ü–∏—é —Ü–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—Ä–∞–∑—Ü—É. üí°",
    "ü§î –•–º, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. üìã",
    "üî¢ –ü–æ—Ö–æ–∂–µ, —á–∏—Å–ª–∞ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. üßÆ",
    "üõ† –£–ø—Å! –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–≤–æ–¥–∞. –î–∞–≤–∞–π—Ç–µ —Å–≤–µ—Ä–∏–º—Å—è —Å –ø—Ä–∏–º–µ—Ä–æ–º –∏ –ø–æ–≤—Ç–æ—Ä–∏–º –ø–æ–ø—ã—Ç–∫—É. üìù",
    "üìä –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ñ–æ—Ä–º–∞—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞. üòä",
    "üôà –Ø –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –≤–≤–æ–¥. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–ª–µ–¥—É–µ—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–∏–º–µ—Ä–∞, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üîÑ",
    "üöß –û—à–∏–±–∫–∞! –§–æ—Ä–º–∞—Ç –≥—Ä–∞–¥–∞—Ü–∏–∏ —Ü–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –µ—â—ë —Ä–∞–∑ –ø–æ –ø—Ä–∏–º–µ—Ä—É –∏ –ø–æ–≤—Ç–æ—Ä–∏–º. üí™",
    "üîç –ù–µ —É–¥–∞—ë—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üìñ"
]

# ------------------------------ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /gradmark ------------------------------

async def gradmark_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int :
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π /gradmark.
    –®–∞–≥ 1: –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –≥—Ä–∞–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–∏ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è).
    """
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    rows = get_all_products(user_id)
    if not rows :
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã!")
        return ConversationHandler.END

    keyboard = [
        [InlineKeyboardButton("–¢–≤–µ—Ä–¥–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ (—Ä—É–±.)", callback_data=gradmark_FIXED)],
        [InlineKeyboardButton("–ù–∞—Ü–µ–Ω–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (%)", callback_data=gradmark_PERCENT)],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≥—Ä–∞–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–∏:",
        reply_markup=reply_markup
    )
    return gradmark_TYPE

async def gradmark_type_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int :
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≥—Ä–∞–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–∏.
    –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø (fixed –∏–ª–∏ percent) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–æ–º –≤–≤–æ–¥–∞ –≥—Ä–∞–¥–∞—Ü–∏–∏.
    """
    query = update.callback_query
    data = query.data
    await query.answer()

    if data == gradmark_FIXED :
        context.user_data["gradmark_type"] = "fixed"
        text = (
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≥—Ä–∞–¥–∞—Ü–∏–∏ —Ü–µ–Ω —Å —Ç–≤–µ—Ä–¥–æ–π –Ω–∞—Ü–µ–Ω–∫–æ–π:\n\n"
            "üìã –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–ª—è:\n\n"
            "0-10000 1000\n"
            "10001-50000 1500\n"
            "50001-100000 3000\n"
            "100001+ 7500\n\n"
            "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤–≤–æ–¥–∞:\n"
            "–ü–µ—Ä–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0 –¥–æ N.\n"
            "–î–∞–ª–µ–µ –∏–¥—É—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —Ü–µ–Ω ‚Äì –∫–∞–∂–¥—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ–ª–∂–µ–Ω –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–º, –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤ —á–∏—Å–µ–ª.\n"
            "–ü—Ä–∏–º–µ—Ä: 10001-50000 —Å–ª–µ–¥—É–µ—Ç –∑–∞ 10000.\n"
            "–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Å N+ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —É–∫–∞–∑–∞–Ω–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º —Å—É–º–º–∞–º, –Ω–∞—á–∏–Ω–∞—è —Å N –∏ –≤—ã—à–µ, –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–µ—Ä—Ö–Ω–µ–≥–æ –ø—Ä–µ–¥–µ–ª–∞."
        )
    elif data == gradmark_PERCENT :
        context.user_data["gradmark_type"] = "percent"
        text = (
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≥—Ä–∞–¥–∞—Ü–∏–∏ —Ü–µ–Ω —Å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–æ–π:\n\n"
            "üìã –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–ª—è:\n\n"
            "0-10000 1.5%\n"
            "10001-50000 3%\n"
            "50001-100000 5%\n"
            "100001+ 7%\n\n"
            "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤–≤–æ–¥–∞:\n"
            "–ü–µ—Ä–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0 –¥–æ N.\n"
            "–î–∞–ª–µ–µ –∏–¥—É—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —Ü–µ–Ω ‚Äì –∫–∞–∂–¥—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ–ª–∂–µ–Ω –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–º, –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤ —á–∏—Å–µ–ª.\n"
            "–ü—Ä–∏–º–µ—Ä: 10001-50000 —Å–ª–µ–¥—É–µ—Ç –∑–∞ 10000.\n"
            "–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Å N+ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —É–∫–∞–∑–∞–Ω–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º —Å—É–º–º–∞–º, –Ω–∞—á–∏–Ω–∞—è —Å N –∏ –≤—ã—à–µ, –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–µ—Ä—Ö–Ω–µ–≥–æ –ø—Ä–µ–¥–µ–ª–∞."
        )
    else :
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥—Ä–∞–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–∏.")
        return ConversationHandler.END

    await query.edit_message_text(text)
    return ENTER_GRADATION

async def gradmark_gradation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int :
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≥—Ä–∞–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤.
    –ü–∞—Ä—Å–∏—Ç –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤.
    –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ context.user_data["gradmark_data"] –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã.
    –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ –∏–∑ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ ERROR_MESSAGES_GRADMARK_FORMAT.
    """
    user_input = update.message.text.strip()
    lines = [line for line in user_input.splitlines() if line.strip()]
    num_ranges = len(lines)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ (–æ—Ç 1 –¥–æ 100)
    if not (1 <= num_ranges <= 100) :
        await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100.")
        return await _gradmark_retry_or_abort(update, context)

    gradmark_data = []  # –°–ø–∏—Å–æ–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä–µ–π: {"start": int, "end": int –∏–ª–∏ None, "markup": float}

    # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:
    # –ó–∞–∫—Ä—ã—Ç—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: –Ω–∞–ø—Ä–∏–º–µ—Ä "0-10000 1000" –∏–ª–∏ "10.001-50.000 1.500"
    closed_pattern = r'^\s*(\d{1,3}(?:[.]?\d{3})*)-(\d{1,3}(?:[.]?\d{3})*)\s+(\d+(?:[.,]\d+)?%?)\s*$'
    # –û—Ç–∫—Ä—ã—Ç—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: –Ω–∞–ø—Ä–∏–º–µ—Ä "100001+ 7500"
    open_pattern = r'^\s*(\d{1,3}(?:[.]?\d{3})*)\+\s+(\d+(?:[.,]\d+)?%?)\s*$'

    gradmark_type = context.user_data.get("gradmark_type", "fixed")

    for idx, line in enumerate(lines) :
        m_closed = re.match(closed_pattern, line)
        m_open = re.match(open_pattern, line)
        if m_closed :
            start_str, end_str, markup_str = m_closed.groups()
            # –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ç—ã—Å—è—á
            start_val = int(start_str.replace(".", ""))
            end_val = int(end_str.replace(".", ""))
        elif m_open :
            start_str, markup_str = m_open.groups()
            start_val = int(start_str.replace(".", ""))
            end_val = None  # –û—Ç–∫—Ä—ã—Ç—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        else :
            return await _gradmark_retry_or_abort(update, context)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ markup-–∑–Ω–∞—á–µ–Ω–∏—è: –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–Ω–∞–∫–∞ '%'
        markup_str = markup_str.replace(" ", "")
        if gradmark_type == "fixed" :
            if "%" in markup_str :
                return await _gradmark_retry_or_abort(update, context)
        # –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–∏ –∑–Ω–∞–∫ '%' –º–æ–∂–µ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å, –µ–≥–æ —É–±–∏—Ä–∞–µ–º
        markup_str = markup_str.replace("%", "").replace(",", ".")
        try :
            markup_value = float(markup_str)
        except ValueError :
            return await _gradmark_retry_or_abort(update, context)

        gradmark_data.append({
            "start" : start_val,
            "end" : end_val,  # None –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            "markup" : markup_value
        })

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤:
    # –ü–µ—Ä–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0
    if gradmark_data[0]["start"] != 0 :
        return await _gradmark_retry_or_abort(update, context)

    # –ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞–∫—Ä—ã—Ç—ã–π, —Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å (–ø—Ä–µ–¥—ã–¥—É—â–µ–µ end + 1)
    for i in range(1, len(gradmark_data)) :
        prev = gradmark_data[i - 1]
        curr = gradmark_data[i]
        if prev["end"] is None :
            # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã–π, —Ç–æ –ª–∏—à–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã
            return await _gradmark_retry_or_abort(update, context)
        expected_start = prev["end"] + 1
        if curr["start"] != expected_start :
            return await _gradmark_retry_or_abort(update, context)

    # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–º (—Å –ø–ª—é—Å–æ–º)
    if gradmark_data[-1]["end"] is not None :
        return await _gradmark_retry_or_abort(update, context)

    # –ï—Å–ª–∏ –≤—Å—ë —É—Å–ø–µ—à–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞–¥–∞—Ü–∏—é
    context.user_data["gradmark_data"] = gradmark_data
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ö–∞–Ω–∏–∑–º –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏: "–í—Å–µ –≥—Ä—É–ø–ø—ã" –∏ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏–∑ LIST_BRAND_GROUP
    keyboard = []
    keyboard.append([InlineKeyboardButton("–í—Å–µ –≥—Ä—É–ø–ø—ã", callback_data="group_ALL")])
    for group_name in LIST_BRAND_GROUP.keys() :
        callback_data = f"group_{group_name}"
        keyboard.append([InlineKeyboardButton(group_name, callback_data=callback_data)])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=reply_markup)
    return CHOOSE_GROUP

async def _gradmark_retry_or_abort(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int :
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∞ –≥—Ä–∞–¥–∞—Ü–∏–∏.
    –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –∏ –ª–∏–±–æ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞, –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π.
    """
    attempts = context.user_data.get("gradmark_attempts", 0) + 1
    context.user_data["gradmark_attempts"] = attempts
    error_msg = random.choice(ERROR_MESSAGES_GRADMARK_FORMAT)
    if attempts >= 3 :
        await update.message.reply_text(f"{error_msg}\n–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫. –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω.")
        return ConversationHandler.END
    else :
        await update.message.reply_text(error_msg)
        return ENTER_GRADATION

async def gradmark_format_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞ (CSV/Excel/–°–æ–æ–±—â–µ–Ω–∏–µ) –¥–ª—è gradmark.
    –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω CSV –∏–ª–∏ Excel, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, –≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –≤—ã–≤–æ–¥–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É.
    """
    query = update.callback_query
    choice = query.data
    await query.answer()

    context.user_data["gradmark_chosen_format"] = choice

    if choice in [FORMAT_CSV, FORMAT_EXCEL]:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
        user_id = update.effective_user.id
        pseudo_data = load_pseudo_user_data(user_id)
        group_name = context.user_data.get("selected_group", "ALL")
        selected_brands = context.user_data.get("selected_brands", [])
        if group_name == "ALL":
            final_product_list = build_final_product_list_for_all(pseudo_data)
        else:
            final_product_list = build_final_product_list_for_multiple_brands(pseudo_data, selected_brands)
        context.user_data["gradmark_final_product_list"] = final_product_list

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –≤—ã–≤–æ–¥–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
        keyboard = [
            [
                InlineKeyboardButton("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", callback_data=GRADMARK_STRUCTURE_GROUPED),
                InlineKeyboardButton("–ü–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç", callback_data=GRADMARK_STRUCTURE_FLAT),
            ]
        ]
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ASK_GRADMARK_STRUCTURE
    else:
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç "–°–æ–æ–±—â–µ–Ω–∏–µ", —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
        keyboard = [
            [
                InlineKeyboardButton("–î–∞", callback_data=MSG_COMMENTS_YES),
                InlineKeyboardButton("–ù–µ—Ç", callback_data=MSG_COMMENTS_NO),
            ]
        ]
        await query.edit_message_text(
            text="–£—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ASK_COMMENTS

async def gradmark_structure_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è gradmark.
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ–± —É—á—ë—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
    """
    query = update.callback_query
    structure_choice = query.data  # GRADMARK_STRUCTURE_GROUPED –∏–ª–∏ GRADMARK_STRUCTURE_FLAT
    await query.answer()

    if structure_choice == GRADMARK_STRUCTURE_GROUPED:
        context.user_data["gradmark_structure"] = "grouped"
    else:
        context.user_data["gradmark_structure"] = "flat"

    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data=MSG_COMMENTS_YES),
            InlineKeyboardButton("–ù–µ—Ç", callback_data=MSG_COMMENTS_NO),
        ]
    ]
    await query.edit_message_text(
        text="–£—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ASK_COMMENTS

async def gradmark_comments_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± —É—á—ë—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è gradmark.
    –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –≥—Ä–∞–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–∏.
    """
    query = update.callback_query
    choice = query.data  # MSG_COMMENTS_YES –∏–ª–∏ MSG_COMMENTS_NO
    await query.answer()

    include_comments = (choice == MSG_COMMENTS_YES)
    chosen_format = context.user_data.get("gradmark_chosen_format")

    if chosen_format == FORMAT_CSV:
        if context.user_data.get("gradmark_structure", "grouped") == "flat":
            await query.edit_message_text("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV —Å –≥—Ä–∞–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–æ–π (–ü–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)...")
            await send_csv_flat_with_gradmark(query, context, include_comments=include_comments)
        else:
            await query.edit_message_text("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV —Å –≥—Ä–∞–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–æ–π...")
            await send_csv_with_gradmark(query, context, include_comments=include_comments)
    elif chosen_format == FORMAT_EXCEL:
        if context.user_data.get("gradmark_structure", "grouped") == "flat":
            await query.edit_message_text("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Å –≥—Ä–∞–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–æ–π (–ü–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)...")
            await send_excel_flat_with_gradmark(query, context, include_comments=include_comments)
        else:
            await query.edit_message_text("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Å –≥—Ä–∞–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–æ–π...")
            await send_excel_with_gradmark(query, context, include_comments=include_comments)
    elif chosen_format == FORMAT_MSG:
        await query.edit_message_text("–§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥—Ä–∞–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–æ–π...")
        await send_message_with_gradmark(query, context, include_comments=include_comments)
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")

    return ConversationHandler.END

# ------------------------------ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≥—Ä–∞–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–∏ ------------------------------

def apply_gradmark_to_final_list(final_product_list, gradmark_type, gradmark_data) :
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≥—Ä–∞–¥–∞—Ü–∏–æ–Ω–Ω—É—é –Ω–∞—Ü–µ–Ω–∫—É –∫ —Ü–µ–Ω–∞–º —Ç–æ–≤–∞—Ä–æ–≤.
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è, –≤ –∫–∞–∫–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–ø–∞–¥–∞–µ—Ç –µ–≥–æ —Ü–µ–Ω–∞, –∏ –∫ —Ü–µ–Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –Ω–∞—Ü–µ–Ω–∫–∞.

    gradmark_type: "fixed" –∏–ª–∏ "percent"
    gradmark_data: —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –≤–∏–¥–∞:
        [{"start": int, "end": int –∏–ª–∏ None, "markup": float}, ...]
    """
    if not final_product_list :
        return

    for model_group, product_dict in final_product_list.items() :
        for product_name, entries in product_dict.items() :
            for entry in entries :
                orig_price = entry["price"]
                # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
                applicable_markup = None
                for rng in gradmark_data :
                    start = rng["start"]
                    end = rng["end"]
                    if end is not None :
                        if start <= orig_price <= end :
                            applicable_markup = rng["markup"]
                            break
                    else :
                        # –û—Ç–∫—Ä—ã—Ç—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (N+)
                        if orig_price >= start :
                            applicable_markup = rng["markup"]
                            break
                # –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞–π–¥–µ–Ω, –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Ü–µ–Ω–∫—É
                if applicable_markup is not None :
                    if gradmark_type == "fixed" :
                        new_price = orig_price + applicable_markup
                    else :  # percent
                        new_price = orig_price + (orig_price * (applicable_markup / 100.0))
                        new_price = round_up_to_nearest_100(new_price)
                    entry["price"] = int(new_price)
    # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º —Ç–æ–≤–∞—Ä –Ω–µ –ø–æ–ø–∞–ª –Ω–∏ –≤ –æ–¥–∏–Ω –¥–∏–∞–ø–∞–∑–æ–Ω ‚Äì –æ—Å—Ç–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

# ------------------------------ –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤/—Å–æ–æ–±—â–µ–Ω–∏–π —Å –≥—Ä–∞–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–æ–π ------------------------------

async def send_csv_with_gradmark(query, context, include_comments=False) :
    user_id = query.message.chat_id
    group_name = context.user_data.get("selected_group", "ALL")
    selected_brands = context.user_data.get("selected_brands", [])
    gradmark_type = context.user_data.get("gradmark_type", "fixed")
    gradmark_data = context.user_data.get("gradmark_data", [])

    pseudo_data = load_pseudo_user_data(user_id)
    if group_name == "ALL" :
        final_product_list = build_final_product_list_for_all(pseudo_data)
    else :
        final_product_list = build_final_product_list_for_multiple_brands(pseudo_data, selected_brands)

    apply_gradmark_to_final_list(final_product_list, gradmark_type, gradmark_data)

    if not include_comments :
        remove_commented_products(final_product_list)

    await send_csv(query.message, context, final_product_list, file_prefix="gradmark_")

async def send_csv_flat_with_gradmark(query, context, include_comments=False) :
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSV-—Ñ–∞–π–ª –¥–ª—è /gradmark –≤ –ø–ª–æ—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å –≥—Ä–∞–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–æ–π.
    """
    user_id = query.message.chat_id
    group_name = context.user_data.get("selected_group", "ALL")
    selected_brands = context.user_data.get("selected_brands", [])
    gradmark_type = context.user_data.get("gradmark_type", "fixed")
    gradmark_data = context.user_data.get("gradmark_data", [])
    pseudo_data = load_pseudo_user_data(user_id)

    if group_name == "ALL" :
        final_product_list = build_final_product_list_for_all(pseudo_data)
    else :
        final_product_list = build_final_product_list_for_multiple_brands(pseudo_data, selected_brands)

    apply_gradmark_to_final_list(final_product_list, gradmark_type, gradmark_data)
    if not include_comments :
        remove_commented_products(final_product_list)

    await send_csv_flat(query.message, context, final_product_list, file_prefix="gradmark_")

async def send_excel_with_gradmark(query, context, include_comments=False):
    user_id = query.message.chat_id
    group_name = context.user_data.get("selected_group", "ALL")
    selected_brands = context.user_data.get("selected_brands", [])
    gradmark_type = context.user_data.get("gradmark_type", "fixed")
    gradmark_data = context.user_data.get("gradmark_data", [])

    pseudo_data = load_pseudo_user_data(user_id)
    if group_name == "ALL":
        final_product_list = build_final_product_list_for_all(pseudo_data)
    else:
        final_product_list = build_final_product_list_for_multiple_brands(pseudo_data, selected_brands)

    apply_gradmark_to_final_list(final_product_list, gradmark_type, gradmark_data)

    if not include_comments:
        remove_commented_products(final_product_list)

    await send_excel(query.message, context, final_product_list, file_prefix="gradmark_")

async def send_excel_flat_with_gradmark(query, context, include_comments=False) :
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Excel-—Ñ–∞–π–ª –¥–ª—è /gradmark –≤ –ø–ª–æ—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å –≥—Ä–∞–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–æ–π.
    """
    user_id = query.message.chat_id
    group_name = context.user_data.get("selected_group", "ALL")
    selected_brands = context.user_data.get("selected_brands", [])
    gradmark_type = context.user_data.get("gradmark_type", "fixed")
    gradmark_data = context.user_data.get("gradmark_data", [])
    pseudo_data = load_pseudo_user_data(user_id)

    if group_name == "ALL" :
        final_product_list = build_final_product_list_for_all(pseudo_data)
    else :
        final_product_list = build_final_product_list_for_multiple_brands(pseudo_data, selected_brands)

    apply_gradmark_to_final_list(final_product_list, gradmark_type, gradmark_data)
    if not include_comments :
        remove_commented_products(final_product_list)

    await send_excel_flat(query.message, context, final_product_list, file_prefix="gradmark_")

async def send_message_with_gradmark(query, context, include_comments=False):
    user_id = query.message.chat_id
    group_name = context.user_data.get("selected_group", "ALL")
    selected_brands = context.user_data.get("selected_brands", [])
    gradmark_type = context.user_data.get("gradmark_type", "fixed")
    gradmark_data = context.user_data.get("gradmark_data", [])

    pseudo_data = load_pseudo_user_data(user_id)
    if group_name == "ALL":
        final_product_list = build_final_product_list_for_all(pseudo_data)
    else:
        final_product_list = build_final_product_list_for_multiple_brands(pseudo_data, selected_brands)

    apply_gradmark_to_final_list(final_product_list, gradmark_type, gradmark_data)

    messages = generate_text_messages(
        final_product_list,
        PRODUCT_LIBRARY,
        include_comments=include_comments
    )
    for msg in messages:
        await query.message.reply_text(msg, parse_mode="HTML")

# ------------------------------ ConversationHandler –¥–ª—è /gradmark ------------------------------

def get_gradmark_conversation_handler():
    return ConversationHandler(
        entry_points=[CommandHandler("gradmark", gradmark_command)],
        states={
            gradmark_TYPE: [
                CallbackQueryHandler(gradmark_type_callback, pattern=f"^{gradmark_FIXED}|{gradmark_PERCENT}$")
            ],
            ENTER_GRADATION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, gradmark_gradation_handler)
            ],
            CHOOSE_GROUP: [
                CallbackQueryHandler(markup_group_callback, pattern=r"^group_")
            ],
            CHOOSE_CATEGORY: [
                CallbackQueryHandler(markup_category_callback, pattern=r"^cat_")
            ],
            CHOOSE_FORMAT: [
                CallbackQueryHandler(gradmark_format_callback, pattern=f"^{FORMAT_CSV}|{FORMAT_EXCEL}|{FORMAT_MSG}$")
            ],
            ASK_GRADMARK_STRUCTURE: [
                CallbackQueryHandler(gradmark_structure_callback, pattern=f"^{GRADMARK_STRUCTURE_GROUPED}|{GRADMARK_STRUCTURE_FLAT}$")
            ],
            ASK_COMMENTS: [
                CallbackQueryHandler(gradmark_comments_callback, pattern=f"^{MSG_COMMENTS_YES}|{MSG_COMMENTS_NO}$")
            ],
        },
        fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)],
    )

# ------------------------------ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø LIST ------------------------------

# –î–ª—è –∫–æ–º–∞–Ω–¥—ã /list
LIST_GROUP = 5       # –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
LIST_CATEGORY = 6    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
LIST_FORMAT = 7      # –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ (CSV/Excel/–°–æ–æ–±—â–µ–Ω–∏–µ)

# –ù–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –≤ /list
LIST_STRUCTURE_GROUPED = "list_structure_grouped"
LIST_STRUCTURE_FLAT = "list_structure_flat"

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:
ASK_LIST_STRUCTURE = 8


def build_full_product_list(user_data: dict) -> Dict[str, Dict[str, List[Dict[str, Any]]]]:
    """
    –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ (model_group, product_name),
    —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É:
         final_product_list[model_group][product_name] -> List[offers]
    –ü—Ä–∏ —ç—Ç–æ–º –≤ –∫–∞–∂–¥–æ–º –æ—Ñ—Ñ–µ—Ä–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—è: "price", "country", "supplier", "comment" –∏ "brand".
    """
    logger = logging.getLogger(__name__)
    products_data = user_data.get("products", [])
    grouped_products: Dict[Tuple[str, str], Set[Tuple[Any, str, str, str, str]]] = defaultdict(set)

    for product in products_data:
        model_group = product.get("model_group")
        product_name = product.get("product_name")
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ "brand"
        brand = product.get("brand", "–ù–µ —É–∫–∞–∑–∞–Ω")
        country = product.get("country", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        price = product.get("price")
        supplier = product.get("supplier", "–ù–µ —É–∫–∞–∑–∞–Ω")
        comment = product.get("comment", "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")

        if not model_group or not product_name or price is None:
            logger.info(f"[build_full_product_list] –ü—Ä–æ–ø—É—â–µ–Ω —Ç–æ–≤–∞—Ä –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö: {product}")
            continue

        key = (model_group, product_name)
        offer_tuple = (price, country, supplier, comment, brand)
        grouped_products[key].add(offer_tuple)

    final_product_list: Dict[str, Dict[str, List[Dict[str, Any]]]] = defaultdict(dict)
    for (model_group, product_name), offers in grouped_products.items():
        final_product_list[model_group].setdefault(product_name, [])
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ñ—Ñ–µ—Ä—ã –ø–æ —Ü–µ–Ω–µ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
        sorted_offers = sorted(offers, key=lambda x: x[0])
        for price, country, supplier, comment, brand in sorted_offers:
            final_product_list[model_group][product_name].append({
                "price": price,
                "country": country,
                "supplier": supplier,
                "comment": comment,
                "brand": brand
            })
    return final_product_list

def filter_products_by_brand(full_list: Dict[str, Dict[str, List[Dict[str, Any]]]],
                             accepted_brands: List[str]) -> Dict[str, Dict[str, List[Dict[str, Any]]]]:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ full_list —Ç–∞–∫, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ –æ—Ñ—Ñ–µ—Ä—ã,
    —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è "brand" —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ accepted_brands.
    """
    filtered = {}
    for mg, prod_dict in full_list.items():
        for product_name, offers in prod_dict.items():
            filtered_offers = [offer for offer in offers if offer.get("brand") in accepted_brands]
            if filtered_offers:
                if mg not in filtered:
                    filtered[mg] = {}
                filtered[mg][product_name] = filtered_offers
    return filtered

def build_final_product_list_for_brand_list(user_data: dict, selected_brand: str) -> Dict[str, Dict[str, List[Dict[str, Any]]]]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–¥–±—Ä–µ–Ω–¥–∞.
    –ï—Å–ª–∏ selected_brand == "ALL" ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫.
    –ò–Ω–∞—á–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã —Ç–∞–∫, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª–µ "brand" —Ä–∞–≤–Ω–æ selected_brand.
    """
    full_list = build_full_product_list(user_data)
    if selected_brand == "ALL":
        return full_list
    return filter_products_by_brand(full_list, [selected_brand])

def build_final_product_list_for_multiple_brands_list(user_data: dict, brand_list: List[str]) -> Dict[str, Dict[str, List[Dict[str, Any]]]]:
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–¥–±—Ä–µ–Ω–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –≥—Ä—É–ø–ø—ã "Anrdoid"
    —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å ["Samsung Galaxy", "Xiaomi", "OnePlus"]).
    """
    if not brand_list:
        return {}
    full_list = build_full_product_list(user_data)
    return filter_products_by_brand(full_list, brand_list)

def build_final_product_list_for_all_list(user_data: dict) -> Dict[str, Dict[str, List[Dict[str, Any]]]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–∞–Ω–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ "–í—Å–µ –≥—Ä—É–ø–ø—ã").
    """
    return build_full_product_list(user_data)

async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ –ë–î)
    rows = get_all_products(user_id)
    if not rows:
        await update.message.reply_text("–í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã.")
        return ConversationHandler.END

    # –†–∞–∑ —Ç–æ–≤–∞—Ä—ã –µ—Å—Ç—å ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    keyboard = []
    keyboard.append([InlineKeyboardButton("–í—Å–µ –≥—Ä—É–ø–ø—ã", callback_data="group_ALL")])
    for group_name in LIST_BRAND_GROUP.keys():
        callback_data = f"group_{group_name}"
        keyboard.append([InlineKeyboardButton(group_name, callback_data=callback_data)])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=reply_markup)

    return LIST_GROUP

async def list_group_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ï—Å–ª–∏ group_ALL => —Å—Ä–∞–∑—É –∫ LIST_FORMAT (–≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞)
    –ò–Ω–∞—á–µ => –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" + sub-–±—Ä–µ–Ω–¥—ã –∏–∑ LIST_BRAND_GROUP[group].
    """
    query = update.callback_query
    data = query.data  # "group_ALL" / "group_Apple" / ...
    await query.answer()

    if data == "group_ALL":
        context.user_data["list_selected_group"] = "ALL"
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞
        keyboard = [
            [
                InlineKeyboardButton("CSV", callback_data="list_csv"),
                InlineKeyboardButton("Excel", callback_data="list_excel"),
                InlineKeyboardButton("–°–æ–æ–±—â–µ–Ω–∏–µ", callback_data="list_msg")
            ]
        ]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=InlineKeyboardMarkup(keyboard))
        return LIST_FORMAT

    # –ò–Ω–∞—á–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞
    group_name = data.replace("group_", "")
    context.user_data["list_selected_group"] = group_name

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" + sub-–±—Ä–µ–Ω–¥—ã
    sub_brands = LIST_BRAND_GROUP.get(group_name, [])

    keyboard = []
    keyboard.append([InlineKeyboardButton("–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="cat_ALL")])
    for sb in sub_brands:
        cb = f"cat_{sb}"
        keyboard.append([InlineKeyboardButton(sb, callback_data=cb)])

    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))
    return LIST_CATEGORY

async def list_category_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ï—Å–ª–∏ cat_ALL => –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥-–±—Ä–µ–Ω–¥—ã –≥—Ä—É–ø–ø—ã
    –ò–Ω–∞—á–µ => –æ–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π sub-brand
    –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞ (CSV/Excel/–°–æ–æ–±—â–µ–Ω–∏–µ).
    """
    query = update.callback_query
    data = query.data  # cat_ALL / cat_Apple iPhone / ...
    await query.answer()

    group_name = context.user_data.get("list_selected_group", "ALL")
    if data == "cat_ALL":
        # –≤—Å–µ sub-–±—Ä–µ–Ω–¥—ã
        sub_brands = LIST_BRAND_GROUP.get(group_name, [])
        context.user_data["list_selected_sub_brands"] = sub_brands
    else:
        brand_str = data.replace("cat_", "")
        context.user_data["list_selected_sub_brands"] = [brand_str]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç
    keyboard = [
        [
            InlineKeyboardButton("CSV", callback_data="list_csv"),
            InlineKeyboardButton("Excel", callback_data="list_excel"),
            InlineKeyboardButton("–°–æ–æ–±—â–µ–Ω–∏–µ", callback_data="list_msg")
        ]
    ]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=InlineKeyboardMarkup(keyboard))
    return LIST_FORMAT

async def list_format_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    choice = query.data  # "list_csv", "list_excel" –∏–ª–∏ "list_msg"
    await query.answer()

    user_id = query.message.chat_id
    group_name = context.user_data.get("list_selected_group", "ALL")
    sub_brands = context.user_data.get("list_selected_sub_brands", [])

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã
    pseudo_data = load_pseudo_user_data(user_id)

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    if group_name == "ALL":
        final_product_list = build_final_product_list_for_all_list(pseudo_data)
    else:
        final_product_list = build_final_product_list_for_multiple_brands_list(pseudo_data, sub_brands)

    if not final_product_list:
        await query.edit_message_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    context.user_data["list_final_product_list"] = final_product_list
    context.user_data["list_chosen_format"] = choice

    if choice in ["list_csv", "list_excel"]:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        keyboard = [
            [
                InlineKeyboardButton("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", callback_data=LIST_STRUCTURE_GROUPED),
                InlineKeyboardButton("–ü–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç", callback_data=LIST_STRUCTURE_FLAT),
            ]
        ]
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ASK_LIST_STRUCTURE
    elif choice == "list_msg":
        await query.edit_message_text("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤...")
        messages = generate_full_text_messages(final_product_list, group_name)
        for msg in messages:
            await query.message.reply_text(msg, parse_mode=ParseMode.HTML)
        return ConversationHandler.END
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
        return ConversationHandler.END

async def list_structure_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    structure_choice = query.data  # LIST_STRUCTURE_GROUPED –∏–ª–∏ LIST_STRUCTURE_FLAT
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    context.user_data["list_structure"] = "grouped" if structure_choice == LIST_STRUCTURE_GROUPED else "flat"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω (CSV –∏–ª–∏ Excel)
    chosen_format = context.user_data.get("list_chosen_format")
    final_product_list = context.user_data.get("list_final_product_list")
    group_name = context.user_data.get("list_selected_group", "ALL")

    if chosen_format == "list_csv":
        if context.user_data["list_structure"] == "flat":
            await send_list_csv_flat(query.message, context, final_product_list, group_name)
        else:
            await send_list_csv(query.message, context, final_product_list, group_name)
    elif chosen_format == "list_excel":
        if context.user_data["list_structure"] == "flat":
            await send_list_excel_flat(query.message, context, final_product_list, group_name)
        else:
            await send_list_excel(query.message, context, final_product_list, group_name)
    return ConversationHandler.END

# --------------------- CSV ---------------------

async def send_list_csv(
    message: Message,
    context: ContextTypes.DEFAULT_TYPE,
    final_product_list: Dict[str, Dict[str, List[Dict[str, Any]]]],
    selected_brand: str
):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç CSV-—Ñ–∞–π–ª.
    –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "ALL", –∏–¥—ë–º –ø–æ PRODUCT_LIBRARY,
    –∏–Ω–∞—á–µ ‚Äì –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –æ–±—Ö–æ–¥–∏–º model_group –∏–∑ final_product_list.
    """
    logger = logging.getLogger(__name__)
    logger.info("[send_list_csv] –§–æ—Ä–º–∏—Ä—É–µ–º CSV...")

    current_date = datetime.now().strftime("%d_%m_%Y")
    filename = f"full_product_list_{current_date}.csv"

    try:
        with open(filename, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            header = ["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–°—Ç—Ä–∞–Ω—ã", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]
            writer.writerow(header)

            if selected_brand == "ALL":
                # –û–±—Ö–æ–¥–∏–º –ø–æ –≥—Ä—É–ø–ø–∞–º –∏–∑ PRODUCT_LIBRARY
                brand_list = list(PRODUCT_LIBRARY.keys())
                for brand in brand_list:
                    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –æ–±—Ö–æ–¥–∏–º –µ–≥–æ model_group (–∫–ª—é—á–∏ PRODUCT_LIBRARY[brand])
                    for model_group in PRODUCT_LIBRARY.get(brand, {}):
                        if model_group not in final_product_list:
                            continue
                        writer.writerow([model_group, "–¶–µ–Ω–∞", "–°—Ç—Ä–∞–Ω—ã", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])

                        # "–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º" —Å–ª–æ–≤–∞—Ä—å: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ product_name –∏ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ (entry)
                        flattened_products = [
                            (product_name, entry)
                            for product_name, entries in final_product_list[model_group].items()
                            for entry in entries
                        ]

                        # –ú–Ω–æ–≥–æ–∫—Ä–∏—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:
                        # 1. –ü–æ get_sort_key(brand, model_group, product_name)
                        # 2. –ü–æ —Ü–µ–Ω–µ (entry["price"]) –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é, –µ—Å–ª–∏ product_name –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
                        sorted_products = sorted(
                            flattened_products,
                            key=lambda x : (
                                get_sort_key(brand, model_group, x[0]),
                                x[1]["price"]
                            )
                        )

                        for product_name, entry in sorted_products :
                            writer.writerow([
                                product_name,
                                entry["price"],
                                entry["country"],
                                entry["supplier"],
                                entry["comment"]
                            ])
                        writer.writerow([])

            else:
                # –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –æ–±—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º model_group –∏–∑ final_product_list
                for model_group in sorted(final_product_list.keys()):
                    writer.writerow([model_group, "–¶–µ–Ω–∞", "–°—Ç—Ä–∞–Ω—ã", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
                    products = final_product_list[model_group]
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±—Ä–µ–Ω–¥ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                    sorted_items = sorted(
                        products.items(),
                        key=lambda x: get_sort_key(selected_brand, model_group, x[0])
                    )
                    for product_name, entries in sorted_items:
                        sorted_entries = sorted(entries, key=lambda x: x["price"])
                        for entry in sorted_entries:
                            writer.writerow([
                                product_name,
                                entry["price"],
                                entry["country"],
                                entry["supplier"],
                                entry["comment"]
                            ])
                    writer.writerow([])

        with open(filename, "rb") as f:
            await message.reply_document(document=f, filename=filename, caption="–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ (CSV)!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ CSV: {e}", exc_info=True)
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ CSV.")
    finally:
        if os.path.exists(filename):
            try:
                os.remove(filename)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")

async def send_list_csv_flat(
    message: Message,
    context: ContextTypes.DEFAULT_TYPE,
    final_product_list: Dict[str, Dict[str, List[Dict[str, Any]]]],
    selected_brand: str
):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç CSV-—Ñ–∞–π–ª –¥–ª—è /list –≤ –ø–ª–æ—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    –î–æ–±–∞–≤–ª—è—é—Ç—Å—è –¥–≤–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è" (model_group) –∏ "–ì—Ä—É–ø–ø–∞" (brand).
    """
    logger = logging.getLogger(__name__)
    logger.info("[send_list_csv_flat] –§–æ—Ä–º–∏—Ä—É–µ–º CSV (–ü–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)...")

    current_date = datetime.now().strftime("%d_%m_%Y")
    filename = f"full_product_list_{current_date}.csv"

    try:
        with open(filename, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            # –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
            header = ["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–°—Ç—Ä–∞–Ω—ã", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ì—Ä—É–ø–ø–∞"]
            writer.writerow(header)

            if selected_brand == "ALL":
                brand_list = list(PRODUCT_LIBRARY.keys())
                for brand in brand_list:
                    for model_group in PRODUCT_LIBRARY.get(brand, {}):
                        if model_group not in final_product_list:
                            continue
                        writer.writerow([model_group, "–¶–µ–Ω–∞", "–°—Ç—Ä–∞–Ω—ã", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ì—Ä—É–ø–ø–∞"])
                        # "–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º" —Å–ª–æ–≤–∞—Ä—å
                        flattened_products = [
                            (product_name, entry)
                            for product_name, entries in final_product_list[model_group].items()
                            for entry in entries
                        ]
                        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ get_sort_key –∏ —Ü–µ–Ω–µ
                        sorted_products = sorted(
                            flattened_products,
                            key=lambda x: (get_sort_key(brand, model_group, x[0]), x[1]["price"])
                        )
                        for product_name, entry in sorted_products:
                            writer.writerow([
                                product_name,
                                entry["price"],
                                entry["country"],
                                entry["supplier"],
                                entry["comment"],
                                model_group,  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                                brand         # –ì—Ä—É–ø–ø–∞
                            ])
                        writer.writerow([])
            else:
                for model_group in sorted(final_product_list.keys()):
                    writer.writerow([model_group, "–¶–µ–Ω–∞", "–°—Ç—Ä–∞–Ω—ã", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ì—Ä—É–ø–ø–∞"])
                    products = final_product_list[model_group]
                    sorted_items = sorted(
                        products.items(),
                        key=lambda x: get_sort_key(selected_brand, model_group, x[0])
                    )
                    for product_name, entries in sorted_items:
                        sorted_entries = sorted(entries, key=lambda x: x["price"])
                        for entry in sorted_entries:
                            writer.writerow([
                                product_name,
                                entry["price"],
                                entry["country"],
                                entry["supplier"],
                                entry["comment"],
                                model_group,  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                                selected_brand  # –ì—Ä—É–ø–ø–∞
                            ])
                    writer.writerow([])

        with open(filename, "rb") as f:
            await message.reply_document(document=f, filename=filename, caption="–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ (CSV, –ü–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ CSV (–ø–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç): {e}", exc_info=True)
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ CSV (–ø–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç).")
    finally:
        if os.path.exists(filename):
            try:
                os.remove(filename)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")

# --------------------- EXCEL ---------------------

async def send_list_excel(
    message: Message,
    context: ContextTypes.DEFAULT_TYPE,
    final_product_list: Dict[str, Dict[str, List[Dict[str, Any]]]],
    selected_brand: str
):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç Excel-—Ñ–∞–π–ª.
    –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "ALL", –∏–¥—ë–º –ø–æ PRODUCT_LIBRARY,
    –∏–Ω–∞—á–µ ‚Äì –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –æ–±—Ö–æ–¥–∏–º model_group –∏–∑ final_product_list.
    """
    logger = logging.getLogger(__name__)
    logger.info("[send_list_excel] –§–æ—Ä–º–∏—Ä—É–µ–º Excel...")

    current_date = datetime.now().strftime("%d_%m_%Y")
    filename = f"full_product_list_{current_date}.xlsx"

    try:
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "–ü–æ–ª–Ω—ã–π –°–ø–∏—Å–æ–∫ –¢–æ–≤–∞—Ä–æ–≤"

        headers = ["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–°—Ç—Ä–∞–Ω—ã", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]
        ws.append(headers)

        bold_font = Font(bold=True)
        for cell in ws[1]:
            cell.font = bold_font

        if selected_brand == "ALL":
            brand_list = list(PRODUCT_LIBRARY.keys())
            for brand in brand_list:
                for model_group in PRODUCT_LIBRARY.get(brand, {}):
                    if model_group not in final_product_list:
                        continue
                    ws.append([model_group, "–¶–µ–Ω–∞", "–°—Ç—Ä–∞–Ω—ã", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
                    for col in range(1, len(headers) + 1) :
                        ws.cell(row=ws.max_row, column=col).fill = PatternFill(start_color="FFFF00", end_color="FFFF00",
                                                                               fill_type="solid")

                    products = final_product_list[model_group]

                    # "–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º" —Å–ª–æ–≤–∞—Ä—å: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ product_name –∏ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ (entry)
                    flattened_products = [
                        (product_name, entry)
                        for product_name, entries in products.items()
                        for entry in entries
                    ]

                    # –ú–Ω–æ–≥–æ–∫—Ä–∏—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:
                    # 1. –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É get_sort_key(brand, model_group, product_name)
                    # 2. –ü–æ —Ü–µ–Ω–µ (entry["price"]) –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é, –µ—Å–ª–∏ product_name —Å–æ–≤–ø–∞–¥–∞—é—Ç
                    sorted_products = sorted(
                        flattened_products,
                        key=lambda x : (
                            get_sort_key(brand, model_group, x[0]),
                            x[1]["price"]
                        )
                    )

                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Excel
                    for product_name, entry in sorted_products :
                        ws.append([
                            product_name,
                            entry["price"],
                            entry["country"],
                            entry["supplier"],
                            entry["comment"]
                        ])

                    ws.append([])  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø—ã
        else:
            # –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –æ–±—Ö–æ–¥–∏–º –≤—Å–µ model_group –∏–∑ final_product_list
            for model_group in sorted(final_product_list.keys()):
                ws.append([model_group, "–¶–µ–Ω–∞", "–°—Ç—Ä–∞–Ω—ã", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
                for col in range(1, len(headers)+1):
                    ws.cell(row=ws.max_row, column=col).fill = PatternFill(start_color="FFFF00", end_color="FFFF00", fill_type="solid")
                products = final_product_list[model_group]
                sorted_items = sorted(
                    products.items(),
                    key=lambda x: get_sort_key(selected_brand, model_group, x[0])
                )
                for product_name, entries in sorted_items:
                    sorted_entries = sorted(entries, key=lambda x: x["price"])
                    for entry in sorted_entries:
                        ws.append([
                            product_name,
                            entry["price"],
                            entry["country"],
                            entry["supplier"],
                            entry["comment"]
                        ])
                ws.append([])

        wb.save(filename)
        with open(filename, "rb") as f:
            await message.reply_document(document=f, filename=filename, caption="–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ (Excel)!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ Excel: {e}", exc_info=True)
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ Excel.")
    finally:
        if os.path.exists(filename):
            try:
                os.remove(filename)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")


async def send_list_excel_flat(
        message: Message,
        context: ContextTypes.DEFAULT_TYPE,
        final_product_list: Dict[str, Dict[str, List[Dict[str, Any]]]],
        selected_brand: str
) :
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç Excel-—Ñ–∞–π–ª –¥–ª—è /list –≤ –ø–ª–æ—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏:
    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è" (model_group) –∏ "–ì—Ä—É–ø–ø–∞" (brand).
    """
    logger = logging.getLogger(__name__)
    logger.info("[send_list_excel_flat] –§–æ—Ä–º–∏—Ä—É–µ–º Excel (–ü–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)...")

    current_date = datetime.now().strftime("%d_%m_%Y")
    filename = f"full_product_list_{current_date}.xlsx"

    try :
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "–ü–æ–ª–Ω—ã–π –°–ø–∏—Å–æ–∫ –¢–æ–≤–∞—Ä–æ–≤ (–ü–ª–æ—Å–∫–∏–π)"

        headers = ["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–°—Ç—Ä–∞–Ω—ã", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ì—Ä—É–ø–ø–∞"]
        ws.append(headers)
        bold_font = Font(bold=True)
        for cell in ws[1] :
            cell.font = bold_font

        if selected_brand == "ALL" :
            brand_list = list(PRODUCT_LIBRARY.keys())
            for brand in brand_list :
                for model_group in PRODUCT_LIBRARY.get(brand, {}) :
                    if model_group not in final_product_list :
                        continue
                    ws.append([model_group, "–¶–µ–Ω–∞", "–°—Ç—Ä–∞–Ω—ã", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ì—Ä—É–ø–ø–∞"])
                    for col in range(1, len(headers) + 1) :
                        ws.cell(row=ws.max_row, column=col).fill = PatternFill(start_color="FFFF00", end_color="FFFF00",
                                                                               fill_type="solid")

                    products = final_product_list[model_group]
                    flattened_products = [
                        (product_name, entry)
                        for product_name, entries in products.items()
                        for entry in entries
                    ]
                    sorted_products = sorted(
                        flattened_products,
                        key=lambda x : (get_sort_key(brand, model_group, x[0]), x[1]["price"])
                    )
                    for product_name, entry in sorted_products :
                        ws.append([
                            product_name,
                            entry["price"],
                            entry["country"],
                            entry["supplier"],
                            entry["comment"],
                            model_group,  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                            brand  # –ì—Ä—É–ø–ø–∞
                        ])
                    ws.append([])
        else :
            for model_group in sorted(final_product_list.keys()) :
                ws.append([model_group, "–¶–µ–Ω–∞", "–°—Ç—Ä–∞–Ω—ã", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ì—Ä—É–ø–ø–∞"])
                for col in range(1, len(headers) + 1) :
                    ws.cell(row=ws.max_row, column=col).fill = PatternFill(start_color="FFFF00", end_color="FFFF00",
                                                                           fill_type="solid")
                products = final_product_list[model_group]
                sorted_items = sorted(
                    products.items(),
                    key=lambda x : get_sort_key(selected_brand, model_group, x[0])
                )
                for product_name, entries in sorted_items :
                    sorted_entries = sorted(entries, key=lambda x : x["price"])
                    for entry in sorted_entries :
                        ws.append([
                            product_name,
                            entry["price"],
                            entry["country"],
                            entry["supplier"],
                            entry["comment"],
                            model_group,  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                            selected_brand  # –ì—Ä—É–ø–ø–∞
                        ])
                ws.append([])

        wb.save(filename)
        with open(filename, "rb") as f :
            await message.reply_document(document=f, filename=filename,
                                         caption="–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ (Excel, –ü–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)!")
    except Exception as e :
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ Excel (–ø–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç): {e}", exc_info=True)
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ Excel (–ø–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç).")
    finally :
        if os.path.exists(filename) :
            try :
                os.remove(filename)
            except Exception as e :
                logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")

# --------------------- –¢–ï–ö–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï ---------------------

def generate_full_text_messages(
        final_product_list: Dict[str, Dict[str, List[Dict[str, Any]]]],
        selected_brand: str
) -> List[str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ (HTML-—Ä–∞–∑–º–µ—Ç–∫–∞).

    –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±—Ä–µ–Ω–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Samsung Galaxy" –∏–ª–∏ "–§–µ–Ω—ã –¥–ª—è –≤–æ–ª–æ—Å Dyson"):
      - –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ç—Ç–æ–≥–æ –±—Ä–µ–Ω–¥–∞ (–∂–∏—Ä–Ω—ã–º —Å –∫—É—Ä—Å–∏–≤–æ–º, –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä).
      - –ó–∞—Ç–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ (model_group) –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ (–∂–∏—Ä–Ω—ã–º),
        –∞ –¥–∞–ª–µ–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (product_name) ‚Äì –µ–≥–æ —Å—Ç—Ä–æ–∫–∞ (–∂–∏—Ä–Ω—ã–º —Å –∫—É—Ä—Å–∏–≤–æ–º), —Å –æ—Ñ—Ñ–µ—Ä–∞–º–∏,
        –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º get_sort_key.

    –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "ALL":
      - –¢–æ–≤–∞—Ä—ã –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç—Å—è –ø–æ –±—Ä–µ–Ω–¥–∞–º (–∏—Å–ø–æ–ª—å–∑—É—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è "brand" —É –æ—Ñ—Ñ–µ—Ä–æ–≤) –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ,
        –∫–∞–∫ –æ–Ω–∏ –∏–¥—É—Ç –≤ PRODUCT_LIBRARY.
      - –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–∂–∏—Ä–Ω—ã–º —Å –∫—É—Ä—Å–∏–≤–æ–º, –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä),
        –∑–∞—Ç–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ ‚Äì –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ (–∂–∏—Ä–Ω—ã–º) –∏ —Ç–æ–≤–∞—Ä—ã.
    """
    logger = logging.getLogger(__name__)
    logger.info("[generate_full_text_messages] –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è /list...")

    lines: List[str] = []

    if selected_brand == "ALL":
        # –°–≥—Ä—É–ø–ø–∏—Ä—É–µ–º final_product_list –ø–æ –±—Ä–µ–Ω–¥–∞–º.
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ model_group –±–µ—Ä–µ–º –±—Ä–µ–Ω–¥ –∏–∑ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤—Å–µ –æ—Ñ—Ñ–µ—Ä—ã –≤ –≥—Ä—É–ø–ø–µ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π brand)
        grouped_by_brand: Dict[str, Dict[str, Dict[str, List[Dict[str, Any]]]]] = {}
        for model_group, products in final_product_list.items():
            # –ò—â–µ–º –±—Ä–µ–Ω–¥ –∏–∑ –æ–¥–Ω–æ–π –∏–∑ –∑–∞–ø–∏—Å–µ–π
            brand_val = None
            for prod_name, offers in products.items():
                if offers:
                    brand_val = offers[0].get("brand", "").strip()
                    break
            if not brand_val:
                continue
            if brand_val not in grouped_by_brand:
                grouped_by_brand[brand_val] = {}
            grouped_by_brand[brand_val][model_group] = products

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –±—Ä–µ–Ω–¥—ã –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ –∏ –≤ PRODUCT_LIBRARY
        for brand in PRODUCT_LIBRARY.keys():
            # –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if brand not in grouped_by_brand:
                continue
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±—Ä–µ–Ω–¥–∞
            lines.append(f"<b><i>{brand.upper()}</i></b>")
            lines.append("")
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –±—Ä–µ–Ω–¥–∞.
            # –ï—Å–ª–∏ –¥–ª—è high-level –±—Ä–µ–Ω–¥–∞ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –≤ LIST_BRAND_GROUP, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –ø–æ—Ä—è–¥–æ–∫,
            # –∏–Ω–∞—á–µ ‚Äì –ø–æ—Ä—è–¥–æ–∫ –ø–æ –∫–ª—é—á–∞–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.
            if brand in LIST_BRAND_GROUP:
                desired_model_order = LIST_BRAND_GROUP[brand]
                # –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º desired_model_order, –æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–ª—å–∫–æ —Ç–µ model_group, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ grouped_by_brand[brand]
                model_order = [m for m in desired_model_order if m in grouped_by_brand[brand]]
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–∏–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –º–æ–¥–µ–ª–∏ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É)
                remaining = sorted(set(grouped_by_brand[brand].keys()) - set(model_order))
                model_order.extend(remaining)
            else:
                model_order = sorted(grouped_by_brand[brand].keys())

            for model_group in model_order:
                lines.append(f"<b>{model_group}</b>")
                lines.append("")
                products = grouped_by_brand[brand][model_group]
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
                products = final_product_list[model_group]

                # "–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º" —Å–ª–æ–≤–∞—Ä—å: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ product_name –∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ (entry)
                flattened_products = [
                    (product_name, entry)
                    for product_name, entries in products.items()
                    for entry in entries
                ]

                # –ú–Ω–æ–≥–æ–∫—Ä–∏—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:
                # 1. –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É get_sort_key(brand, model_group, product_name)
                # 2. –ü–æ —Ü–µ–Ω–µ (entry["price"]) –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é, –µ—Å–ª–∏ product_name —Å–æ–≤–ø–∞–¥–∞—é—Ç
                sorted_products = sorted(
                    flattened_products,
                    key=lambda x : (
                        get_sort_key(brand, model_group, x[0]),
                        x[1]["price"]
                    )
                )

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ product_name, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑
                for product_name, group in itertools.groupby(sorted_products, key=lambda x : x[0]) :
                    lines.append(f"<b><i>{product_name}</i></b>:")
                    for _, entry in group :
                        price = entry["price"]
                        comment = entry["comment"]
                        country_name = entry["country"]
                        country_flag = TEXT_TO_FLAG.get(country_name, country_name)
                        supplier = entry["supplier"]
                        formatted_price = f"{price:,}".replace(",", ".")
                        lines.append(f"‚Ä¢ {formatted_price} —Ä—É–±. | {country_flag} | {supplier} | {comment}")
                    lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤

                lines.append("")

    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ
    while lines and not lines[-1].strip():
        lines.pop()

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ MAX_TELEGRAM_TEXT
    messages: List[str] = []
    current_chunk = ""
    for line in lines:
        candidate_len = len(current_chunk) + len(line) + 1
        if candidate_len > MAX_TELEGRAM_TEXT:
            messages.append(current_chunk)
            current_chunk = line
        else:
            if not current_chunk:
                current_chunk = line
            else:
                current_chunk += "\n" + line
    if current_chunk:
        messages.append(current_chunk)

    logger.info(f"[generate_full_text_messages] –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —á–∞–Ω–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
    return messages

def get_list_conversation_handler():
    return ConversationHandler(
        entry_points=[CommandHandler("list", list_command)],
        states={
            LIST_GROUP: [CallbackQueryHandler(list_group_callback, pattern=r"^group_")],
            LIST_CATEGORY: [CallbackQueryHandler(list_category_callback, pattern=r"^cat_")],
            LIST_FORMAT: [CallbackQueryHandler(list_format_callback, pattern=r"^list_(csv|excel|msg)$")],
            ASK_LIST_STRUCTURE: [CallbackQueryHandler(list_structure_callback, pattern=r"^(list_structure_grouped|list_structure_flat)$")],
        },
        fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)],
        name="list_conversation",
        persistent=False
    )

# ------------------------------ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê------------------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None :
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç <b><–ë—ã—Å—Ç—Ä—ã–π –ü—Ä–∞–π—Å></b>. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –Ω–∞–∂–º–∏—Ç–µ /help.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None :
    user_first_name = update.effective_user.first_name

    help_text = (
        "<b>üí° –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞</b>\n\n"
        f"–ü—Ä–∏–≤–µ—Ç, {user_first_name}! –†–∞–¥, —á—Ç–æ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. –ù–∏–∂–µ –æ–ø–∏—Å–∞–Ω—ã –µ–≥–æ –∫–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∫–æ–º–∞–Ω–¥—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º —Ä–∞–±–æ—Ç–∞—Ç—å <b>–±—ã—Å—Ç—Ä–µ–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ</b>:\n\n"

        "<b>üìå –ö–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "<b>‚Ä¢ /start</b> ‚Äî <i>–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞</i>.\n"
        "<b>‚Ä¢ /best</b> ‚Äî <i>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º</i>.\n"
        "<b>‚Ä¢ /markup</b> ‚Äî <i>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤–∞—à–µ–π –Ω–∞—Ü–µ–Ω–∫–æ–π</i>.\n"
        "<b>‚Ä¢ /gradmark</b> ‚Äî <i>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –≥—Ä–∞–¥–∞—Ü–∏–µ–π –Ω–∞—Ü–µ–Ω–∫–∏</i>.\n"
        "<b>‚Ä¢ /list</b> ‚Äî <i>–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</i>.\n"
        "<b>‚Ä¢ /clear</b> ‚Äî <i>–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤</i>.\n"
        "<b>‚Ä¢ /my_price_list</b> ‚Äî <i>–°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞</i>.\n"
        "<b>‚Ä¢ /restart_price_list</b> ‚Äî <i>–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞</i>.\n"
        "<b>‚Ä¢ /cancel</b> ‚Äî <i>–û—Ç–º–µ–Ω–∞ —Ü–∏–∫–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞</i>.\n"
        "<b>‚Ä¢ /currency</b> ‚Äî <i>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç</i>.\n"
        "<b>‚Ä¢ /restart</b> ‚Äî <i>–°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö</i>.\n"
        "<b>‚Ä¢ /help</b> ‚Äî <i>–ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</i>.\n\n"

        "<b>üîç –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:</b>\n\n"
        "‚Ä¢ <i><b>‚úÖ –ì–∏–±–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞:</b></i> –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã, –∑–∞–¥–∞–≤–∞—Ç—å –≥—Ä–∞–¥–∞—Ü–∏—é —Ü–µ–Ω –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n"
        "‚Ä¢ <i><b>‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞:</b></i> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö –∏ –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤.\n"
        "‚Ä¢ <i><b>‚úÖ –£—á—ë—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:</b></i> —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –æ —Ç–æ–≤–∞—Ä–µ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø–∞–∫–æ–≤–∫–∏, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –±/—É...).\n"
        "‚Ä¢ <i><b>‚úÖ –ê–Ω–∞–ª–∏–∑ —ç–º–æ–¥–∑–∏:</b></i> –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ üì¶, üöö, ‚úàÔ∏è –∏ –¥—Ä., —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞.\n"
        "‚Ä¢ <i><b>‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:</b></i> —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ–º–æ–≥–∞–µ—Ç —Å—Ä–∞–∑—É –ø–æ–Ω—è—Ç—å, –∫—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ç–æ–≤–∞—Ä.\n"
        "‚Ä¢ <i><b>‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω:</b></i> —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã –º–∏—Ä–∞ –ø–æ —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º.\n"
        "‚Ä¢ <i><b>‚úÖ –ë–æ–ª—å—à–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:</b></i> –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±–∞–∑—ã —Ç–æ–≤–∞—Ä–æ–≤.\n\n"

        "<b>‚öôÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç?</b>\n\n"
        "–ü—Ä–æ—Å—Ç–æ <b>–ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> —Å —Ç–æ–≤–∞—Ä–∞–º–∏ ‚Äì –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ <b>–∏–∑–≤–ª–µ—á—ë—Ç –≤—Å—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</b> –∏ –¥–æ–±–∞–≤–∏—Ç –µ—ë –≤ —Å–ø–∏—Å–æ–∫.\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–Ω—É –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.\n\n"

        "<b>üí° –í–∞–∂–Ω–æ!</b> –ï—Å–ª–∏ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Ç–æ–≤–∞—Ä –∏–¥—ë—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞–Ω–∞–º–∏ ‚Äì –æ–Ω –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è <b>—Ä–∞–∑–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏</b>.\n\n"

        "üìå –ï—Å–ª–∏ –≤—ã –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –∏ <b>—Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å</b> –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞].\n\n"

        "<b>üì¢ –¶–µ–Ω—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è!</b> –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, <b>–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫</b> –∫–æ–º–∞–Ω–¥–æ–π /clear –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"

        "üöÄ <b>–ë–æ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!</b>\n\n"
        "–°–µ–π—á–∞—Å –º—ã –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ–≤–æ–¥–∏–º <b>–æ—Ç–∫—Ä—ã—Ç–æ–µ –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b>. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å <b>—É–Ω–∏–∫–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å</b> –æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–æ—Ç–∞ <b>—Ä–∞–Ω—å—à–µ –¥—Ä—É–≥–∏—Ö</b>, <b>–≤–ª–∏—è—Ç—å –Ω–∞ –µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏–µ</b> –∏ <b>–ø–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø–µ—Ä–≤—ã–º</b>.\n\n"

        "üîß –ú—ã –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º <b>–Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</b> –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º <b>–Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</b> –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã.\n\n"

        "üí¨ <b>–ù–∞–º –≤–∞–∂–Ω–æ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!</b> –ö–∞–∫ –≤–∞–º –±–æ—Ç? –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å? –ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–∏—Ç—å? –í–∞—à–∏ –∏–¥–µ–∏ –∏ —Ñ–∏–¥–±–µ–∫ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å —Å–µ—Ä–≤–∏—Å –ª—É—á—à–µ.\n\n"

        "üì© <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å</b> –∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º –æ —Å–≤–æ—ë–º –æ–ø—ã—Ç–µ ‚Äî <b>–¥–ª—è –Ω–∞—Å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ!</b>\n\n"

        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ <b>–≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b>, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ @admnlab"
    )

    await update.effective_message.reply_text(
        help_text,
        parse_mode=ParseMode.HTML
    )

async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    # ---------------------
    # –†–∞–Ω—å—à–µ:
    #   USER_DATA[user_id] = {"products" : []}
    # —Ç–µ–ø–µ—Ä—å:
    clear_user_data(user_id)
    await update.message.reply_text("–í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –±—ã–ª –æ—á–∏—â–µ–Ω.")
    # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞


async def currency_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤—Å–µ—Ö API
    cbr_success = currency_api_cbr.get_currency_rates()
    exchange_success = exchange_api.get_rates()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Binance
    binance_api = BinanceAPI()

    # –°–ø–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    binance_spot = {
        'USDT_RUB': binance_api.get_binance_data('USDTRUB'),
        'BTC_USD': binance_api.get_binance_data('BTCUSDT'),
        'ETH_USD': binance_api.get_binance_data('ETHUSDT')
    }

    # P2P –¥–∞–Ω–Ω—ã–µ
    binance_p2p_buy = binance_api.get_p2p_rate(trade_type="BUY")
    binance_p2p_sell = binance_api.get_p2p_rate(trade_type="SELL")

    binance_success = any(binance_spot.values()) or (binance_p2p_buy and binance_p2p_sell)

    if not cbr_success and not exchange_success and not binance_success:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö")
        return

    message = []
    time_updates = []

    # –ë–ª–æ–∫ –¶–ë –†–§
    if cbr_success :
        message.append("üèõÔ∏è <b>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –æ—Ç –¶–ë –†–§</b>\n\n")
        currencies_cbr = {
            'USD' : {'symbol' : 'üíµ', 'name' : '–î–æ–ª–ª–∞—Ä –°–®–ê'},
            'EUR' : {'symbol' : 'üí∂', 'name' : '–ï–≤—Ä–æ'},
            'CNY' : {'symbol' : 'üí¥', 'name' : '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å'}
        }

        for code, info in currencies_cbr.items() :
            data = currency_api_cbr.get_currency_info(code)
            if not data :
                continue

            change_abs = data['change_abs']
            change_pct = data['change_pct']

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∏
            if change_pct > 0 :
                arrow = "‚ÜóÔ∏è"
            elif change_pct < 0 :
                arrow = "‚ÜòÔ∏è"
            else :
                arrow = "‚ûñ"

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if change_pct == 0 and change_abs == 0 :
                change_line = "‚ûñ"
            else :
                change_abs_str = f"{change_abs:+.2f}"
                pct_str = f"{abs(change_pct):.2f}%"
                change_line = f"{change_abs_str} ({pct_str} {arrow})"

            message.append(
                f"{info['symbol']} <b>{info['name']}</b>\n"
                f"‚û§ –¢–µ–∫—É—â–∏–π: {data['current']} ‚ÇΩ\n"
                f"‚û§ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_line}\n\n"
            )
        time_updates.append(f"–¶–ë –†–§: {currency_api_cbr.last_update.strftime('%d.%m.%Y %H:%M')}")
        message.append("______________________________\n")

    # –ë–ª–æ–∫ ExchangeRate-API
    if exchange_success :
        message.append("\nüåç <b>–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –∫—É—Ä—Å—ã –æ—Ç ExchangeRate</b>\n\n")  # –î–æ–±–∞–≤–ª–µ–Ω \n

        # –î–æ–ª–ª–∞—Ä (–ø—Ä—è–º–æ–π –∫—É—Ä—Å)
        usd_rate = round(exchange_api.usd_rate, 2)
        message.append(
            f"üíµ –î–æ–ª–ª–∞—Ä –°–®–ê\n"
            f"‚û§ –ö—É—Ä—Å: {usd_rate} ‚ÇΩ\n\n"
        )

        # –ï–≤—Ä–æ (—á–µ—Ä–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é)
        eur_rate = exchange_api.convert_via_usd('EUR')
        if eur_rate :
            message.append(
                f"üí∂ –ï–≤—Ä–æ\n"
                f"‚û§ –ö—É—Ä—Å: {eur_rate} ‚ÇΩ\n\n"
            )

        # –Æ–∞–Ω—å (—á–µ—Ä–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é)
        cny_rate = exchange_api.convert_via_usd('CNY')
        if cny_rate :
            message.append(
                f"üí¥ –ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å\n"
                f"‚û§ –ö—É—Ä—Å: {cny_rate} ‚ÇΩ\n\n"
            )
        time_updates.append(f"ExchangeRate: {exchange_api.last_update.strftime('%d.%m.%Y %H:%M')}")
        message.append("______________________________\n")

    # –ë–ª–æ–∫ Binance
    if binance_success :
        message.append("\nüåê <b>–ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –æ—Ç Binance</b>\n\n")
        binance_times = []

        # –°–ø–æ—Ç–æ–≤—ã–µ –∫—É—Ä—Å—ã
        for pair_name, pair_data in binance_spot.items() :
            if pair_data :
                binance_times.append(pair_data['time'])
                currency_symbol = '‚ÇΩ' if 'RUB' in pair_name else '$'
                change_abs = pair_data['change_abs']
                change_pct = pair_data['change_pct']

                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∏
                if change_pct > 0 :
                    arrow = "‚ÜóÔ∏è"
                elif change_pct < 0 :
                    arrow = "‚ÜòÔ∏è"
                else :
                    arrow = "‚ûñ"

                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if change_pct == 0 and change_abs == 0 :
                    change_str = "‚ûñ"
                else :
                    change_abs_str = f"{change_abs:+.2f}"
                    pct_str = f"{abs(change_pct):.2f}%"
                    change_str = f"{change_abs_str} ({pct_str} {arrow})"

                message.append(
                    f"<b>–ü–∞—Ä–∞ {pair_name.replace('_', '/')}</b>\n"
                    f"‚û§ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {currency_symbol}{pair_data['price']:,.2f}\n"
                    f"‚û§ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_str}\n\n"
                )

        # P2P –∫—É—Ä—Å—ã
        if binance_p2p_buy and binance_p2p_sell :
            message.append(
                f"<b>USDT/RUB (P2P)</b>\n"
                f"‚û§ –ü–æ–∫—É–ø–∫–∞: ‚ÇΩ{binance_p2p_buy['price']:,.2f}\n"
                f"‚û§ –ü—Ä–æ–¥–∞–∂–∞: ‚ÇΩ{binance_p2p_sell['price']:,.2f}\n\n"
            )
            binance_times.extend([binance_p2p_buy['time'], binance_p2p_sell['time']])

        # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if binance_times :
            latest_time = max(binance_times)
            time_updates.append(f"Binance: {latest_time.strftime('%d.%m.%Y %H:%M')}")

        message.append("______________________________\n")

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if time_updates :
        message.append("\nüïí <b>–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b>")
        ordered_updates = []
        for service in ["–¶–ë –†–§", "ExchangeRate", "Binance"] :
            for update_time in time_updates :
                if update_time.startswith(service) :
                    ordered_updates.append(update_time)
                    break
        message.extend([f"\n{time_str}" for time_str in ordered_updates])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    await update.message.reply_text(
        text="\n".join(message).replace('\n\n', '\n'),
        parse_mode='HTML'
    )

async def catalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å web_app, —É–∫–∞–∑—ã–≤–∞–µ–º URL –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    web_app_info = WebAppInfo(url="https://bestpriceweb.ru")  # <-- –≤–∞—à HTTPS-–¥–æ–º–µ–Ω
    button = InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥", web_app=web_app_info)
    keyboard = [[button]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Inline-–∫–Ω–æ–ø–∫–æ–π
    await update.message.reply_text(
        text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥",
        reply_markup=reply_markup
    )
    pass




# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –î–û –æ—Å—Ç–∞–ª—å–Ω—ã—Ö



# ------------------------------ MAIN ------------------------------
async def main() -> None:
    # ‚îÄ‚îÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    init_db()

    # ‚îÄ‚îÄ –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram-–±–æ—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    application = ApplicationBuilder().token(API_TOKEN).build()

    # ‚îÄ‚îÄ –ú–µ–Ω—é / –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    commands = [
        BotCommand("start",         "üèÅ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("best",          "üî• –õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"),
        BotCommand("markup",        "üí∞ –ù–∞—Ü–µ–Ω–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä"),
        BotCommand("gradmark",      "üìà –ù–∞—Ü–µ–Ω–∫–∞ —Å –≥—Ä–∞–¥–∞—Ü–∏–µ–π"),
        BotCommand("list",          "üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω"),
        BotCommand("my_price_list", "üìä –°–≤–æ–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç"),
        BotCommand("clear",         "‚ôªÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"),
        BotCommand("currency",      "üí≤Ô∏è –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç"),
        BotCommand("help",          "‚öôÔ∏è –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
        BotCommand("restart",       "üõ†Ô∏è –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π"),
        # BotCommand("ai_assistant",  "ü§ñ AI-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–π—Å–∞ (beta)"), ‚öíÔ∏è
        # BotCommand("catalog", "üìö –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"), ‚öíÔ∏è
    ]
    await application.bot.set_my_commands(commands)

    # ‚îÄ‚îÄ –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    application.add_handler(CommandHandler("start",  start))
    application.add_handler(CommandHandler("help",   help_command))
    application.add_handler(CommandHandler("best",   best_command))
    application.add_handler(CommandHandler("restart_price_list", restart_price_list))
    application.add_handler(CommandHandler("clear",  clear_command))
    application.add_handler(CommandHandler("currency", currency_command))
    application.add_handler(CommandHandler("restart", restart_all), group=0)
    # application.add_handler(CommandHandler("catalog", catalog_command)) ‚öíÔ∏è

    # ‚îÄ‚îÄ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (ConversationHandler) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # register_ai_assistant(application) ‚öíÔ∏è

    # ‚îÄ‚îÄ ConversationHandler‚Äô—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    application.add_handler(get_my_price_list_conversation_handler())
    application.add_handler(get_list_conversation_handler())
    application.add_handler(get_markup_conversation_handler())
    application.add_handler(get_gradmark_conversation_handler())

    # ‚îÄ‚îÄ Callback-—Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è /best ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    application.add_handler(CallbackQueryHandler(best_group_callback,      pattern=r"^group_"))
    application.add_handler(CallbackQueryHandler(best_category_callback,   pattern=r"^cat_"))
    application.add_handler(CallbackQueryHandler(best_command_callback,    pattern=r"^best_(csv|excel|msg)$"))
    application.add_handler(CallbackQueryHandler(best_command_comments_callback,
                                                 pattern=r"^best_msg_comments_"))
    application.add_handler(CallbackQueryHandler(best_structure_callback,
                                                 pattern=r"^(structure_grouped|structure_flat)$"))

    # ‚îÄ‚îÄ –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    application.add_handler(MessageHandler(filters.ALL, message_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    await application.run_polling()


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
