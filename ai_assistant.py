"""
Conversation-handler –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /ai_assistant
(—Ä–∞–±–æ—Ç–∞–µ—Ç —Å python-telegram-bot v20+)

–ê–ª–≥–æ—Ä–∏—Ç–º:
1. /ai_assistant         ‚Üí –ø—Ä–æ—Å–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å *—ç—Ç–∞–ª–æ–Ω* (–ø—Ä–∏–º–µ—Ä/—à–∞–±–ª–æ–Ω)
2. –ø–æ–ª—É—á–∞–µ–º —ç—Ç–∞–ª–æ–Ω       ‚Üí –ø—Ä–æ—Å–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å *—Å—ã—Ä–æ–π* –ø—Ä–∞–π—Å-–ª–∏—Å—Ç
3. –ø–æ–ª—É—á–∞–µ–º —Å—ã—Ä–æ–π –ø—Ä–∞–π—Å  ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–∞ —Ç–µ–∫—Å—Ç–∞ –≤ GigaChat
   –ø–æ–∫–∞ –∂–¥—ë–º ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞‚Ä¶¬ª
4. –ø—Ä–∏—Å—ã–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≥–æ—Ç–æ–≤—ã–π, –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
"""

from __future__ import annotations

import asyncio
from enum import IntEnum
from typing import Final

from telegram import Update
from telegram.helpers import escape_markdown
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

from gigachat_client import SYSTEM_PROMPT, chat_completion   # ‚Üê –≤–∞—à –∫–ª–∏–µ–Ω—Ç GigaChat


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ STATES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class AiStates(IntEnum):
    WAIT_TEMPLATE = 1     # –∂–¥—ë–º —ç—Ç–∞–ª–æ–Ω-–ø—Ä–∏–º–µ—Ä
    WAIT_RAW      = 2     # –∂–¥—ë–º ¬´—Å—ã—Ä–æ–π¬ª –ø—Ä–∞–π—Å


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HANDLERS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start_ai_assistant(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–®–∞–≥ 1 ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç—Ç–∞–ª–æ–Ω-–ø—Ä–∏–º–µ—Ä."""
    raw = (
        "*AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç*\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ *–¥–≤–∞* —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
        "1\\. _–≠—Ç–∞–ª–æ–Ω_ ‚Äî –∫–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å **–≥–æ—Ç–æ–≤—ã–π** –ø—Ä–∞–π—Å-–ª–∏—Å—Ç;\n"
        "2\\. _–°—ã—Ä–æ–π_ –ø—Ä–∞–π—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ ‚Äî /cancel"
    )
    await update.message.reply_markdown_v2(
        escape_markdown(raw, version=2)
    )
    return AiStates.WAIT_TEMPLATE


async def receive_template(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–®–∞–≥ 2 ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω, –ø—Ä–æ—Å–∏–º —Å—ã—Ä–æ–π –ø—Ä–∞–π—Å."""
    context.user_data["ai_template"] = update.message.text
    await update.message.reply_markdown(
        "_–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ **—Å—ã—Ä–æ–π** –ø—Ä–∞–π—Å-–ª–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å._"
    )
    return AiStates.WAIT_RAW


async def receive_raw(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–®–∞–≥ 3 ‚Äî –≤—ã–∑—ã–≤–∞–µ–º GigaChat –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    template: str | None = context.user_data.pop("ai_template", None)
    raw: str = update.message.text

    if not template:
        await update.message.reply_text(
            "üòï –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /ai_assistant"
        )
        return ConversationHandler.END

    # –∑–∞–≥–ª—É—à–∫–∞ ¬´–æ–±—Ä–∞–±–æ—Ç–∫–∞‚Ä¶¬ª
    processing = await update.message.reply_text("‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞‚Ä¶")

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º prompt –¥–ª—è GigaChat
    messages = [
        SYSTEM_PROMPT,                    # —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ gigachat_client.py
        {"role": "user", "content": template},
        {"role": "user", "content": raw},
    ]

    try:
        # —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event-loop, –∑–æ–≤—ë–º –ò–ò –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        formatted = await asyncio.to_thread(
            chat_completion, "GigaChat-Pro", messages
        )

        await processing.edit_text(
            formatted, parse_mode="Markdown"
        )
    except Exception as e:
        await processing.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

    return ConversationHandler.END


async def cancel(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """/cancel ‚Äî –¥–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞."""
    context.user_data.pop("ai_template", None)
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ REGISTRATION ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def register_ai_assistant(application) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç ConversationHandler –≤–Ω—É—Ç—Ä–∏ –æ–±—ä–µ–∫—Ç–∞ `application`
    (Application –∏–∑ python-telegram-bot).
    """
    conv: Final = ConversationHandler(
        entry_points=[CommandHandler("ai_assistant", start_ai_assistant)],
        states={
            AiStates.WAIT_TEMPLATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_template)
            ],
            AiStates.WAIT_RAW: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_raw)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        name="ai_assistant_conversation",
        persistent=False,
    )
    application.add_handler(conv)
